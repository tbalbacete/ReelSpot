/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * TMDB API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AccountDetails200Response,
  AccountFavoriteTv200Response,
  AccountGetFavorites200Response,
  AccountLists200Response,
  AccountRatedMovies200Response,
  AccountRatedTv200Response,
  AccountRatedTvEpisodes200Response,
  AccountWatchlistMovies200Response,
  AccountWatchlistTv200Response,
  AlternativeNamesCopy200Response,
  AuthenticationCreateGuestSession200Response,
  AuthenticationCreateRequestToken200Response,
  AuthenticationCreateSession200Response,
  AuthenticationCreateSessionFromLogin200Response,
  AuthenticationCreateSessionFromV4Token200Response,
  AuthenticationDeleteSession200Response,
  AuthenticationValidateKey200Response,
  AuthenticationValidateKey401Response,
  CertificationMovieList200Response,
  CertificationsTvList200Response,
  ChangesMovieList200Response,
  ChangesPeopleList200Response,
  ChangesTvList200Response,
  CollectionDetails200Response,
  CollectionImages200Response,
  CollectionTranslations200Response,
  CompanyAlternativeNames200Response,
  CompanyDetails200Response,
  CompanyImages200Response,
  ConfigurationDetails200Response,
  CreditDetails200Response,
  DetailsCopy200Response,
  DiscoverMovie200Response,
  DiscoverTv200Response,
  FindById200Response,
  GenreMovieList200Response,
  GenreTvList200Response,
  GuestSessionRatedMovies200Response,
  GuestSessionRatedTv200Response,
  GuestSessionRatedTvEpisodes200Response,
  KeywordDetails200Response,
  KeywordMovies200Response,
  ListAddMovieRequest,
  ListCheckItemStatus200Response,
  ListCreate200Response,
  ListDelete200Response,
  ListDetails200Response,
  MovieAccountStates200Response,
  MovieAddRating200Response,
  MovieAddRatingRequest,
  MovieAlternativeTitles200Response,
  MovieCredits200Response,
  MovieDeleteRating200Response,
  MovieDetails200Response,
  MovieExternalIds200Response,
  MovieImages200Response,
  MovieKeywords200Response,
  MovieLatestId200Response,
  MovieLists200Response,
  MovieNowPlayingList200Response,
  MoviePopularList200Response,
  MovieReleaseDates200Response,
  MovieReviews200Response,
  MovieSimilar200Response,
  MovieTopRatedList200Response,
  MovieTranslations200Response,
  MovieUpcomingList200Response,
  MovieVideos200Response,
  MovieWatchProviders200Response,
  NetworkDetails200Response,
  PersonChanges200Response,
  PersonCombinedCredits200Response,
  PersonDetails200Response,
  PersonExternalIds200Response,
  PersonLatestId200Response,
  PersonMovieCredits200Response,
  PersonPopularList200Response,
  PersonTaggedImages200Response,
  PersonTvCredits200Response,
  ReviewDetails200Response,
  SearchCollection200Response,
  SearchCompany200Response,
  SearchKeyword200Response,
  SearchMovie200Response,
  SearchMulti200Response,
  SearchPerson200Response,
  SearchTv200Response,
  Translations200Response,
  TrendingAll200Response,
  TrendingPeople200Response,
  TrendingTv200Response,
  TvEpisodeChangesById200Response,
  TvEpisodeCredits200Response,
  TvEpisodeDetails200Response,
  TvEpisodeExternalIds200Response,
  TvEpisodeGroupDetails200Response,
  TvEpisodeImages200Response,
  TvEpisodeTranslations200Response,
  TvSeasonAccountStates200Response,
  TvSeasonAggregateCredits200Response,
  TvSeasonChangesById200Response,
  TvSeasonCredits200Response,
  TvSeasonDetails200Response,
  TvSeasonExternalIds200Response,
  TvSeasonImages200Response,
  TvSeasonTranslations200Response,
  TvSeasonVideos200Response,
  TvSeasonWatchProviders200Response,
  TvSeriesAggregateCredits200Response,
  TvSeriesAiringTodayList200Response,
  TvSeriesAlternativeTitles200Response,
  TvSeriesChanges200Response,
  TvSeriesContentRatings200Response,
  TvSeriesCredits200Response,
  TvSeriesDetails200Response,
  TvSeriesEpisodeGroups200Response,
  TvSeriesExternalIds200Response,
  TvSeriesKeywords200Response,
  TvSeriesLatestId200Response,
  TvSeriesOnTheAirList200Response,
  TvSeriesPopularList200Response,
  TvSeriesRecommendations200Response,
  TvSeriesReviews200Response,
  TvSeriesScreenedTheatrically200Response,
  TvSeriesSimilar200Response,
  TvSeriesTopRatedList200Response,
  TvSeriesTranslations200Response,
  TvSeriesVideos200Response,
  TvSeriesWatchProviders200Response,
  WatchProvidersAvailableRegions200Response,
  WatchProvidersMovieList200Response,
} from "../models";
import {
  AccountDetails200ResponseFromJSON,
  AccountDetails200ResponseToJSON,
  AccountFavoriteTv200ResponseFromJSON,
  AccountFavoriteTv200ResponseToJSON,
  AccountGetFavorites200ResponseFromJSON,
  AccountGetFavorites200ResponseToJSON,
  AccountLists200ResponseFromJSON,
  AccountLists200ResponseToJSON,
  AccountRatedMovies200ResponseFromJSON,
  AccountRatedMovies200ResponseToJSON,
  AccountRatedTv200ResponseFromJSON,
  AccountRatedTv200ResponseToJSON,
  AccountRatedTvEpisodes200ResponseFromJSON,
  AccountRatedTvEpisodes200ResponseToJSON,
  AccountWatchlistMovies200ResponseFromJSON,
  AccountWatchlistMovies200ResponseToJSON,
  AccountWatchlistTv200ResponseFromJSON,
  AccountWatchlistTv200ResponseToJSON,
  AlternativeNamesCopy200ResponseFromJSON,
  AlternativeNamesCopy200ResponseToJSON,
  AuthenticationCreateGuestSession200ResponseFromJSON,
  AuthenticationCreateGuestSession200ResponseToJSON,
  AuthenticationCreateRequestToken200ResponseFromJSON,
  AuthenticationCreateRequestToken200ResponseToJSON,
  AuthenticationCreateSession200ResponseFromJSON,
  AuthenticationCreateSession200ResponseToJSON,
  AuthenticationCreateSessionFromLogin200ResponseFromJSON,
  AuthenticationCreateSessionFromLogin200ResponseToJSON,
  AuthenticationCreateSessionFromV4Token200ResponseFromJSON,
  AuthenticationCreateSessionFromV4Token200ResponseToJSON,
  AuthenticationDeleteSession200ResponseFromJSON,
  AuthenticationDeleteSession200ResponseToJSON,
  AuthenticationValidateKey200ResponseFromJSON,
  AuthenticationValidateKey200ResponseToJSON,
  AuthenticationValidateKey401ResponseFromJSON,
  AuthenticationValidateKey401ResponseToJSON,
  CertificationMovieList200ResponseFromJSON,
  CertificationMovieList200ResponseToJSON,
  CertificationsTvList200ResponseFromJSON,
  CertificationsTvList200ResponseToJSON,
  ChangesMovieList200ResponseFromJSON,
  ChangesMovieList200ResponseToJSON,
  ChangesPeopleList200ResponseFromJSON,
  ChangesPeopleList200ResponseToJSON,
  ChangesTvList200ResponseFromJSON,
  ChangesTvList200ResponseToJSON,
  CollectionDetails200ResponseFromJSON,
  CollectionDetails200ResponseToJSON,
  CollectionImages200ResponseFromJSON,
  CollectionImages200ResponseToJSON,
  CollectionTranslations200ResponseFromJSON,
  CollectionTranslations200ResponseToJSON,
  CompanyAlternativeNames200ResponseFromJSON,
  CompanyAlternativeNames200ResponseToJSON,
  CompanyDetails200ResponseFromJSON,
  CompanyDetails200ResponseToJSON,
  CompanyImages200ResponseFromJSON,
  CompanyImages200ResponseToJSON,
  ConfigurationDetails200ResponseFromJSON,
  ConfigurationDetails200ResponseToJSON,
  CreditDetails200ResponseFromJSON,
  CreditDetails200ResponseToJSON,
  DetailsCopy200ResponseFromJSON,
  DetailsCopy200ResponseToJSON,
  DiscoverMovie200ResponseFromJSON,
  DiscoverMovie200ResponseToJSON,
  DiscoverTv200ResponseFromJSON,
  DiscoverTv200ResponseToJSON,
  FindById200ResponseFromJSON,
  FindById200ResponseToJSON,
  GenreMovieList200ResponseFromJSON,
  GenreMovieList200ResponseToJSON,
  GenreTvList200ResponseFromJSON,
  GenreTvList200ResponseToJSON,
  GuestSessionRatedMovies200ResponseFromJSON,
  GuestSessionRatedMovies200ResponseToJSON,
  GuestSessionRatedTv200ResponseFromJSON,
  GuestSessionRatedTv200ResponseToJSON,
  GuestSessionRatedTvEpisodes200ResponseFromJSON,
  GuestSessionRatedTvEpisodes200ResponseToJSON,
  KeywordDetails200ResponseFromJSON,
  KeywordDetails200ResponseToJSON,
  KeywordMovies200ResponseFromJSON,
  KeywordMovies200ResponseToJSON,
  ListAddMovieRequestFromJSON,
  ListAddMovieRequestToJSON,
  ListCheckItemStatus200ResponseFromJSON,
  ListCheckItemStatus200ResponseToJSON,
  ListCreate200ResponseFromJSON,
  ListCreate200ResponseToJSON,
  ListDelete200ResponseFromJSON,
  ListDelete200ResponseToJSON,
  ListDetails200ResponseFromJSON,
  ListDetails200ResponseToJSON,
  MovieAccountStates200ResponseFromJSON,
  MovieAccountStates200ResponseToJSON,
  MovieAddRating200ResponseFromJSON,
  MovieAddRating200ResponseToJSON,
  MovieAddRatingRequestFromJSON,
  MovieAddRatingRequestToJSON,
  MovieAlternativeTitles200ResponseFromJSON,
  MovieAlternativeTitles200ResponseToJSON,
  MovieCredits200ResponseFromJSON,
  MovieCredits200ResponseToJSON,
  MovieDeleteRating200ResponseFromJSON,
  MovieDeleteRating200ResponseToJSON,
  MovieDetails200ResponseFromJSON,
  MovieDetails200ResponseToJSON,
  MovieExternalIds200ResponseFromJSON,
  MovieExternalIds200ResponseToJSON,
  MovieImages200ResponseFromJSON,
  MovieImages200ResponseToJSON,
  MovieKeywords200ResponseFromJSON,
  MovieKeywords200ResponseToJSON,
  MovieLatestId200ResponseFromJSON,
  MovieLatestId200ResponseToJSON,
  MovieLists200ResponseFromJSON,
  MovieLists200ResponseToJSON,
  MovieNowPlayingList200ResponseFromJSON,
  MovieNowPlayingList200ResponseToJSON,
  MoviePopularList200ResponseFromJSON,
  MoviePopularList200ResponseToJSON,
  MovieReleaseDates200ResponseFromJSON,
  MovieReleaseDates200ResponseToJSON,
  MovieReviews200ResponseFromJSON,
  MovieReviews200ResponseToJSON,
  MovieSimilar200ResponseFromJSON,
  MovieSimilar200ResponseToJSON,
  MovieTopRatedList200ResponseFromJSON,
  MovieTopRatedList200ResponseToJSON,
  MovieTranslations200ResponseFromJSON,
  MovieTranslations200ResponseToJSON,
  MovieUpcomingList200ResponseFromJSON,
  MovieUpcomingList200ResponseToJSON,
  MovieVideos200ResponseFromJSON,
  MovieVideos200ResponseToJSON,
  MovieWatchProviders200ResponseFromJSON,
  MovieWatchProviders200ResponseToJSON,
  NetworkDetails200ResponseFromJSON,
  NetworkDetails200ResponseToJSON,
  PersonChanges200ResponseFromJSON,
  PersonChanges200ResponseToJSON,
  PersonCombinedCredits200ResponseFromJSON,
  PersonCombinedCredits200ResponseToJSON,
  PersonDetails200ResponseFromJSON,
  PersonDetails200ResponseToJSON,
  PersonExternalIds200ResponseFromJSON,
  PersonExternalIds200ResponseToJSON,
  PersonLatestId200ResponseFromJSON,
  PersonLatestId200ResponseToJSON,
  PersonMovieCredits200ResponseFromJSON,
  PersonMovieCredits200ResponseToJSON,
  PersonPopularList200ResponseFromJSON,
  PersonPopularList200ResponseToJSON,
  PersonTaggedImages200ResponseFromJSON,
  PersonTaggedImages200ResponseToJSON,
  PersonTvCredits200ResponseFromJSON,
  PersonTvCredits200ResponseToJSON,
  ReviewDetails200ResponseFromJSON,
  ReviewDetails200ResponseToJSON,
  SearchCollection200ResponseFromJSON,
  SearchCollection200ResponseToJSON,
  SearchCompany200ResponseFromJSON,
  SearchCompany200ResponseToJSON,
  SearchKeyword200ResponseFromJSON,
  SearchKeyword200ResponseToJSON,
  SearchMovie200ResponseFromJSON,
  SearchMovie200ResponseToJSON,
  SearchMulti200ResponseFromJSON,
  SearchMulti200ResponseToJSON,
  SearchPerson200ResponseFromJSON,
  SearchPerson200ResponseToJSON,
  SearchTv200ResponseFromJSON,
  SearchTv200ResponseToJSON,
  Translations200ResponseFromJSON,
  Translations200ResponseToJSON,
  TrendingAll200ResponseFromJSON,
  TrendingAll200ResponseToJSON,
  TrendingPeople200ResponseFromJSON,
  TrendingPeople200ResponseToJSON,
  TrendingTv200ResponseFromJSON,
  TrendingTv200ResponseToJSON,
  TvEpisodeChangesById200ResponseFromJSON,
  TvEpisodeChangesById200ResponseToJSON,
  TvEpisodeCredits200ResponseFromJSON,
  TvEpisodeCredits200ResponseToJSON,
  TvEpisodeDetails200ResponseFromJSON,
  TvEpisodeDetails200ResponseToJSON,
  TvEpisodeExternalIds200ResponseFromJSON,
  TvEpisodeExternalIds200ResponseToJSON,
  TvEpisodeGroupDetails200ResponseFromJSON,
  TvEpisodeGroupDetails200ResponseToJSON,
  TvEpisodeImages200ResponseFromJSON,
  TvEpisodeImages200ResponseToJSON,
  TvEpisodeTranslations200ResponseFromJSON,
  TvEpisodeTranslations200ResponseToJSON,
  TvSeasonAccountStates200ResponseFromJSON,
  TvSeasonAccountStates200ResponseToJSON,
  TvSeasonAggregateCredits200ResponseFromJSON,
  TvSeasonAggregateCredits200ResponseToJSON,
  TvSeasonChangesById200ResponseFromJSON,
  TvSeasonChangesById200ResponseToJSON,
  TvSeasonCredits200ResponseFromJSON,
  TvSeasonCredits200ResponseToJSON,
  TvSeasonDetails200ResponseToJSON,
  TvSeasonExternalIds200ResponseFromJSON,
  TvSeasonExternalIds200ResponseToJSON,
  TvSeasonImages200ResponseToJSON,
  TvSeasonTranslations200ResponseFromJSON,
  TvSeasonTranslations200ResponseToJSON,
  TvSeasonVideos200ResponseFromJSON,
  TvSeasonVideos200ResponseToJSON,
  TvSeasonWatchProviders200ResponseFromJSON,
  TvSeasonWatchProviders200ResponseToJSON,
  TvSeriesAggregateCredits200ResponseFromJSON,
  TvSeriesAggregateCredits200ResponseToJSON,
  TvSeriesAiringTodayList200ResponseFromJSON,
  TvSeriesAiringTodayList200ResponseToJSON,
  TvSeriesAlternativeTitles200ResponseFromJSON,
  TvSeriesAlternativeTitles200ResponseToJSON,
  TvSeriesChanges200ResponseFromJSON,
  TvSeriesChanges200ResponseToJSON,
  TvSeriesContentRatings200ResponseFromJSON,
  TvSeriesContentRatings200ResponseToJSON,
  TvSeriesCredits200ResponseFromJSON,
  TvSeriesCredits200ResponseToJSON,
  TvSeriesDetails200ResponseFromJSON,
  TvSeriesDetails200ResponseToJSON,
  TvSeriesEpisodeGroups200ResponseFromJSON,
  TvSeriesEpisodeGroups200ResponseToJSON,
  TvSeriesExternalIds200ResponseFromJSON,
  TvSeriesExternalIds200ResponseToJSON,
  TvSeriesKeywords200ResponseFromJSON,
  TvSeriesKeywords200ResponseToJSON,
  TvSeriesLatestId200ResponseFromJSON,
  TvSeriesLatestId200ResponseToJSON,
  TvSeriesOnTheAirList200ResponseFromJSON,
  TvSeriesOnTheAirList200ResponseToJSON,
  TvSeriesPopularList200ResponseFromJSON,
  TvSeriesPopularList200ResponseToJSON,
  TvSeriesRecommendations200ResponseFromJSON,
  TvSeriesRecommendations200ResponseToJSON,
  TvSeriesReviews200ResponseFromJSON,
  TvSeriesReviews200ResponseToJSON,
  TvSeriesScreenedTheatrically200ResponseFromJSON,
  TvSeriesScreenedTheatrically200ResponseToJSON,
  TvSeriesSimilar200ResponseFromJSON,
  TvSeriesSimilar200ResponseToJSON,
  TvSeriesTopRatedList200ResponseFromJSON,
  TvSeriesTopRatedList200ResponseToJSON,
  TvSeriesTranslations200ResponseFromJSON,
  TvSeriesTranslations200ResponseToJSON,
  TvSeriesVideos200ResponseFromJSON,
  TvSeriesVideos200ResponseToJSON,
  TvSeriesWatchProviders200ResponseFromJSON,
  TvSeriesWatchProviders200ResponseToJSON,
  WatchProvidersAvailableRegions200ResponseFromJSON,
  WatchProvidersAvailableRegions200ResponseToJSON,
  WatchProvidersMovieList200ResponseFromJSON,
  WatchProvidersMovieList200ResponseToJSON,
} from "../models";

export interface AccountAddFavoriteRequest {
  accountId: any;
  sessionId?: any;
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface AccountAddToWatchlistRequest {
  accountId: any;
  sessionId?: any;
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface AccountDetailsRequest {
  accountId: any;
  sessionId?: any;
}

export interface AccountFavoriteTvRequest {
  accountId: any;
  language?: any;
  page?: any;
  sessionId?: any;
  sortBy?: AccountFavoriteTvSortByEnum;
}

export interface AccountGetFavoritesRequest {
  accountId: any;
  language?: any;
  page?: any;
  sessionId?: any;
  sortBy?: AccountGetFavoritesSortByEnum;
}

export interface AccountListsRequest {
  accountId: any;
  page?: any;
  sessionId?: any;
}

export interface AccountRatedMoviesRequest {
  accountId: any;
  language?: any;
  page?: any;
  sessionId?: any;
  sortBy?: AccountRatedMoviesSortByEnum;
}

export interface AccountRatedTvRequest {
  accountId: any;
  language?: any;
  page?: any;
  sessionId?: any;
  sortBy?: AccountRatedTvSortByEnum;
}

export interface AccountRatedTvEpisodesRequest {
  accountId: any;
  language?: any;
  page?: any;
  sessionId?: any;
  sortBy?: AccountRatedTvEpisodesSortByEnum;
}

export interface AccountWatchlistMoviesRequest {
  accountId: any;
  language?: any;
  page?: any;
  sessionId?: any;
  sortBy?: AccountWatchlistMoviesSortByEnum;
}

export interface AccountWatchlistTvRequest {
  accountId: any;
  language?: any;
  page?: any;
  sessionId?: any;
  sortBy?: AccountWatchlistTvSortByEnum;
}

export interface AlternativeNamesCopyRequest {
  networkId: any;
}

export interface AuthenticationCreateSessionRequest {
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface AuthenticationCreateSessionFromLoginRequest {
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface AuthenticationCreateSessionFromV4TokenRequest {
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface AuthenticationDeleteSessionRequest {
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface ChangesMovieListRequest {
  endDate?: any;
  page?: any;
  startDate?: any;
}

export interface ChangesPeopleListRequest {
  endDate?: any;
  page?: any;
  startDate?: any;
}

export interface ChangesTvListRequest {
  endDate?: any;
  page?: any;
  startDate?: any;
}

export interface CollectionDetailsRequest {
  collectionId: any;
  language?: any;
}

export interface CollectionImagesRequest {
  collectionId: any;
  includeImageLanguage?: any;
  language?: any;
}

export interface CollectionTranslationsRequest {
  collectionId: any;
}

export interface CompanyAlternativeNamesRequest {
  companyId: any;
}

export interface CompanyDetailsRequest {
  companyId: any;
}

export interface CompanyImagesRequest {
  companyId: any;
}

export interface ConfigurationCountriesRequest {
  language?: any;
}

export interface CreditDetailsRequest {
  creditId: any;
}

export interface DetailsCopyRequest {
  networkId: any;
}

export interface DiscoverMovieRequest {
  certification?: any;
  certificationGte?: any;
  certificationLte?: any;
  certificationCountry?: any;
  includeAdult?: any;
  includeVideo?: any;
  language?: any;
  page?: any;
  primaryReleaseYear?: any;
  primaryReleaseDateGte?: any;
  primaryReleaseDateLte?: any;
  region?: any;
  releaseDateGte?: any;
  releaseDateLte?: any;
  sortBy?: DiscoverMovieSortByEnum;
  voteAverageGte?: any;
  voteAverageLte?: any;
  voteCountGte?: any;
  voteCountLte?: any;
  watchRegion?: any;
  withCast?: any;
  withCompanies?: any;
  withCrew?: any;
  withGenres?: any;
  withKeywords?: any;
  withOriginCountry?: any;
  withOriginalLanguage?: any;
  withPeople?: any;
  withReleaseType?: any;
  withRuntimeGte?: any;
  withRuntimeLte?: any;
  withWatchMonetizationTypes?: any;
  withWatchProviders?: any;
  withoutCompanies?: any;
  withoutGenres?: any;
  withoutKeywords?: any;
  withoutWatchProviders?: any;
  year?: any;
}

export interface DiscoverTvRequest {
  airDateGte?: any;
  airDateLte?: any;
  firstAirDateYear?: any;
  firstAirDateGte?: any;
  firstAirDateLte?: any;
  includeAdult?: any;
  includeNullFirstAirDates?: any;
  language?: any;
  page?: any;
  screenedTheatrically?: any;
  sortBy?: DiscoverTvSortByEnum;
  timezone?: any;
  voteAverageGte?: any;
  voteAverageLte?: any;
  voteCountGte?: any;
  voteCountLte?: any;
  watchRegion?: any;
  withCompanies?: any;
  withGenres?: any;
  withKeywords?: any;
  withNetworks?: any;
  withOriginCountry?: any;
  withOriginalLanguage?: any;
  withRuntimeGte?: any;
  withRuntimeLte?: any;
  withStatus?: any;
  withWatchMonetizationTypes?: any;
  withWatchProviders?: any;
  withoutCompanies?: any;
  withoutGenres?: any;
  withoutKeywords?: any;
  withoutWatchProviders?: any;
  withType?: any;
}

export interface FindByIdRequest {
  externalId: any;
  externalSource: FindByIdExternalSourceEnum;
  language?: any;
}

export interface GenreMovieListRequest {
  language?: any;
}

export interface GenreTvListRequest {
  language?: any;
}

export interface GuestSessionRatedMoviesRequest {
  guestSessionId: any;
  language?: any;
  page?: any;
  sortBy?: GuestSessionRatedMoviesSortByEnum;
}

export interface GuestSessionRatedTvRequest {
  guestSessionId: any;
  language?: any;
  page?: any;
  sortBy?: GuestSessionRatedTvSortByEnum;
}

export interface GuestSessionRatedTvEpisodesRequest {
  guestSessionId: any;
  language?: any;
  page?: any;
  sortBy?: GuestSessionRatedTvEpisodesSortByEnum;
}

export interface KeywordDetailsRequest {
  keywordId: any;
}

export interface KeywordMoviesRequest {
  keywordId: any;
  includeAdult?: any;
  language?: any;
  page?: any;
}

export interface ListAddMovieOperationRequest {
  listId: any;
  sessionId: any;
  listAddMovieRequest?: ListAddMovieRequest;
}

export interface ListCheckItemStatusRequest {
  listId: any;
  language?: any;
  movieId?: any;
}

export interface ListClearRequest {
  listId: any;
  sessionId: any;
  confirm: any;
}

export interface ListCreateRequest {
  sessionId: any;
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface ListDeleteRequest {
  listId: any;
  sessionId: any;
}

export interface ListDetailsRequest {
  listId: any;
  language?: any;
}

export interface ListRemoveMovieRequest {
  listId: any;
  sessionId: any;
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface MovieAccountStatesRequest {
  movieId: any;
  sessionId?: any;
  guestSessionId?: any;
}

export interface MovieAddRatingOperationRequest {
  movieId: any;
  contentType: any;
  guestSessionId?: any;
  sessionId?: any;
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface MovieAlternativeTitlesRequest {
  movieId: any;
  country?: any;
}

export interface MovieChangesRequest {
  movieId: any;
  endDate?: any;
  page?: any;
  startDate?: any;
}

export interface MovieCreditsRequest {
  movieId: any;
  language?: any;
}

export interface MovieDeleteRatingRequest {
  movieId: any;
  contentType?: any;
  guestSessionId?: any;
  sessionId?: any;
}

export interface MovieDetailsRequest {
  movieId: any;
  appendToResponse?: any;
  language?: any;
}

export interface MovieExternalIdsRequest {
  movieId: any;
}

export interface MovieImagesRequest {
  movieId: any;
  includeImageLanguage?: any;
  language?: any;
}

export interface MovieKeywordsRequest {
  movieId: any;
}

export interface MovieListsRequest {
  movieId: any;
  language?: any;
  page?: any;
}

export interface MovieNowPlayingListRequest {
  language?: any;
  page?: any;
  region?: any;
}

export interface MoviePopularListRequest {
  language?: any;
  page?: any;
  region?: any;
}

export interface MovieRecommendationsRequest {
  movieId: any;
  language?: any;
  page?: any;
}

export interface MovieReleaseDatesRequest {
  movieId: any;
}

export interface MovieReviewsRequest {
  movieId: any;
  language?: any;
  page?: any;
}

export interface MovieSimilarRequest {
  movieId: any;
  language?: any;
  page?: any;
}

export interface MovieTopRatedListRequest {
  language?: any;
  page?: any;
  region?: any;
}

export interface MovieTranslationsRequest {
  movieId: any;
}

export interface MovieUpcomingListRequest {
  language?: any;
  page?: any;
  region?: any;
}

export interface MovieVideosRequest {
  movieId: any;
  language?: any;
}

export interface MovieWatchProvidersRequest {
  movieId: any;
}

export interface NetworkDetailsRequest {
  networkId: any;
}

export interface PersonChangesRequest {
  personId: any;
  endDate?: any;
  page?: any;
  startDate?: any;
}

export interface PersonCombinedCreditsRequest {
  personId: any;
  language?: any;
}

export interface PersonDetailsRequest {
  personId: any;
  appendToResponse?: any;
  language?: any;
}

export interface PersonExternalIdsRequest {
  personId: any;
}

export interface PersonImagesRequest {
  personId: any;
}

export interface PersonMovieCreditsRequest {
  personId: any;
  language?: any;
}

export interface PersonPopularListRequest {
  language?: any;
  page?: any;
}

export interface PersonTaggedImagesRequest {
  personId: any;
  page?: any;
}

export interface PersonTvCreditsRequest {
  personId: any;
  language?: any;
}

export interface ReviewDetailsRequest {
  reviewId: any;
}

export interface SearchCollectionRequest {
  query: any;
  includeAdult?: any;
  language?: any;
  page?: any;
  region?: any;
}

export interface SearchCompanyRequest {
  query: any;
  page?: any;
}

export interface SearchKeywordRequest {
  query: any;
  page?: any;
}

export interface SearchMovieRequest {
  query: any;
  includeAdult?: any;
  language?: any;
  primaryReleaseYear?: any;
  page?: any;
  region?: any;
  year?: any;
}

export interface SearchMultiRequest {
  query: any;
  includeAdult?: any;
  language?: any;
  page?: any;
}

export interface SearchPersonRequest {
  query: any;
  includeAdult?: any;
  language?: any;
  page?: any;
}

export interface SearchTvRequest {
  query: any;
  firstAirDateYear?: any;
  includeAdult?: any;
  language?: any;
  page?: any;
  year?: any;
}

export interface TranslationsRequest {
  personId: any;
}

export interface TrendingAllRequest {
  timeWindow: TrendingAllTimeWindowEnum;
  language?: any;
}

export interface TrendingMoviesRequest {
  timeWindow: TrendingMoviesTimeWindowEnum;
  language?: any;
}

export interface TrendingPeopleRequest {
  timeWindow: TrendingPeopleTimeWindowEnum;
  language?: any;
}

export interface TrendingTvRequest {
  timeWindow: TrendingTvTimeWindowEnum;
  language?: any;
}

export interface TvEpisodeAccountStatesRequest {
  seriesId: any;
  seasonNumber: any;
  episodeNumber: any;
  sessionId?: any;
  guestSessionId?: any;
}

export interface TvEpisodeAddRatingRequest {
  seriesId: any;
  contentType: any;
  seasonNumber: any;
  episodeNumber: any;
  guestSessionId?: any;
  sessionId?: any;
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface TvEpisodeChangesByIdRequest {
  episodeId: any;
}

export interface TvEpisodeCreditsRequest {
  seriesId: any;
  seasonNumber: any;
  episodeNumber: any;
  language?: any;
}

export interface TvEpisodeDeleteRatingRequest {
  seriesId: any;
  seasonNumber: any;
  episodeNumber: any;
  contentType?: any;
  guestSessionId?: any;
  sessionId?: any;
}

export interface TvEpisodeDetailsRequest {
  seriesId: any;
  seasonNumber: any;
  episodeNumber: any;
  appendToResponse?: any;
  language?: any;
}

export interface TvEpisodeExternalIdsRequest {
  seriesId: any;
  seasonNumber: any;
  episodeNumber: any;
}

export interface TvEpisodeGroupDetailsRequest {
  tvEpisodeGroupId: any;
}

export interface TvEpisodeImagesRequest {
  seriesId: any;
  seasonNumber: any;
  episodeNumber: any;
  includeImageLanguage?: any;
  language?: any;
}

export interface TvEpisodeTranslationsRequest {
  seriesId: any;
  seasonNumber: any;
  episodeNumber: any;
}

export interface TvEpisodeVideosRequest {
  seriesId: any;
  seasonNumber: any;
  episodeNumber: any;
  includeVideoLanguage?: any;
  language?: any;
}

export interface TvSeasonAccountStatesRequest {
  seriesId: any;
  seasonNumber: any;
  sessionId?: any;
  guestSessionId?: any;
}

export interface TvSeasonAggregateCreditsRequest {
  seriesId: any;
  seasonNumber: any;
  language?: any;
}

export interface TvSeasonChangesByIdRequest {
  seasonId: any;
  endDate?: any;
  page?: any;
  startDate?: any;
}

export interface TvSeasonCreditsRequest {
  seriesId: any;
  seasonNumber: any;
  language?: any;
}

export interface TvSeasonDetailsRequest {
  seriesId: any;
  seasonNumber: any;
  appendToResponse?: any;
  language?: any;
}

export interface TvSeasonExternalIdsRequest {
  seriesId: any;
  seasonNumber: any;
}

export interface TvSeasonImagesRequest {
  seriesId: any;
  seasonNumber: any;
  includeImageLanguage?: any;
  language?: any;
}

export interface TvSeasonTranslationsRequest {
  seriesId: any;
  seasonNumber: any;
}

export interface TvSeasonVideosRequest {
  seriesId: any;
  seasonNumber: any;
  includeVideoLanguage?: any;
  language?: any;
}

export interface TvSeasonWatchProvidersRequest {
  seriesId: any;
  seasonNumber: any;
  language?: any;
}

export interface TvSeriesAccountStatesRequest {
  seriesId: any;
  sessionId?: any;
  guestSessionId?: any;
}

export interface TvSeriesAddRatingRequest {
  seriesId: any;
  contentType: any;
  guestSessionId?: any;
  sessionId?: any;
  movieAddRatingRequest?: MovieAddRatingRequest;
}

export interface TvSeriesAggregateCreditsRequest {
  seriesId: any;
  language?: any;
}

export interface TvSeriesAiringTodayListRequest {
  language?: any;
  page?: any;
  timezone?: any;
}

export interface TvSeriesAlternativeTitlesRequest {
  seriesId: any;
}

export interface TvSeriesChangesRequest {
  seriesId: any;
  endDate?: any;
  page?: any;
  startDate?: any;
}

export interface TvSeriesContentRatingsRequest {
  seriesId: any;
}

export interface TvSeriesCreditsRequest {
  seriesId: any;
  language?: any;
}

export interface TvSeriesDeleteRatingRequest {
  seriesId: any;
  contentType?: any;
  guestSessionId?: any;
  sessionId?: any;
}

export interface TvSeriesDetailsRequest {
  seriesId: any;
  appendToResponse?: any;
  language?: any;
}

export interface TvSeriesEpisodeGroupsRequest {
  seriesId: any;
}

export interface TvSeriesExternalIdsRequest {
  seriesId: any;
}

export interface TvSeriesImagesRequest {
  seriesId: any;
  includeImageLanguage?: any;
  language?: any;
}

export interface TvSeriesKeywordsRequest {
  seriesId: any;
}

export interface TvSeriesOnTheAirListRequest {
  language?: any;
  page?: any;
  timezone?: any;
}

export interface TvSeriesPopularListRequest {
  language?: any;
  page?: any;
}

export interface TvSeriesRecommendationsRequest {
  seriesId: any;
  language?: any;
  page?: any;
}

export interface TvSeriesReviewsRequest {
  seriesId: any;
  language?: any;
  page?: any;
}

export interface TvSeriesScreenedTheatricallyRequest {
  seriesId: any;
}

export interface TvSeriesSimilarRequest {
  seriesId: any;
  language?: any;
  page?: any;
}

export interface TvSeriesTopRatedListRequest {
  language?: any;
  page?: any;
}

export interface TvSeriesTranslationsRequest {
  seriesId: any;
}

export interface TvSeriesVideosRequest {
  seriesId: any;
  includeVideoLanguage?: any;
  language?: any;
}

export interface TvSeriesWatchProvidersRequest {
  seriesId: any;
}

export interface WatchProviderTvListRequest {
  language?: any;
  watchRegion?: any;
}

export interface WatchProvidersAvailableRegionsRequest {
  language?: any;
}

export interface WatchProvidersMovieListRequest {
  language?: any;
  watchRegion?: any;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   *
   * Add Favorite
   */
  async accountAddFavoriteRaw(
    requestParameters: AccountAddFavoriteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieAddRating200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountAddFavorite."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/favorite`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieAddRating200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Add Favorite
   */
  async accountAddFavorite(
    requestParameters: AccountAddFavoriteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieAddRating200Response> {
    const response = await this.accountAddFavoriteRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Add To Watchlist
   */
  async accountAddToWatchlistRaw(
    requestParameters: AccountAddToWatchlistRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieAddRating200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountAddToWatchlist."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/watchlist`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieAddRating200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Add To Watchlist
   */
  async accountAddToWatchlist(
    requestParameters: AccountAddToWatchlistRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieAddRating200Response> {
    const response = await this.accountAddToWatchlistRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Details
   */
  async accountDetailsRaw(
    requestParameters: AccountDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountDetails200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountDetails."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Details
   */
  async accountDetails(
    requestParameters: AccountDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountDetails200Response> {
    const response = await this.accountDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Favorite TV
   */
  async accountFavoriteTvRaw(
    requestParameters: AccountFavoriteTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountFavoriteTv200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountFavoriteTv."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/favorite/tv`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountFavoriteTv200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Favorite TV
   */
  async accountFavoriteTv(
    requestParameters: AccountFavoriteTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountFavoriteTv200Response> {
    const response = await this.accountFavoriteTvRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Favorite Movies
   */
  async accountGetFavoritesRaw(
    requestParameters: AccountGetFavoritesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountGetFavorites200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountGetFavorites."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/favorite/movies`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountGetFavorites200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Favorite Movies
   */
  async accountGetFavorites(
    requestParameters: AccountGetFavoritesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountGetFavorites200Response> {
    const response = await this.accountGetFavoritesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Lists
   */
  async accountListsRaw(
    requestParameters: AccountListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountLists200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountLists."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/lists`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountLists200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Lists
   */
  async accountLists(
    requestParameters: AccountListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountLists200Response> {
    const response = await this.accountListsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Rated Movies
   */
  async accountRatedMoviesRaw(
    requestParameters: AccountRatedMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountRatedMovies200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountRatedMovies."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/rated/movies`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountRatedMovies200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Rated Movies
   */
  async accountRatedMovies(
    requestParameters: AccountRatedMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountRatedMovies200Response> {
    const response = await this.accountRatedMoviesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Rated TV
   */
  async accountRatedTvRaw(
    requestParameters: AccountRatedTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountRatedTv200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountRatedTv."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/rated/tv`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountRatedTv200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Rated TV
   */
  async accountRatedTv(
    requestParameters: AccountRatedTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountRatedTv200Response> {
    const response = await this.accountRatedTvRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Rated TV Episodes
   */
  async accountRatedTvEpisodesRaw(
    requestParameters: AccountRatedTvEpisodesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountRatedTvEpisodes200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountRatedTvEpisodes."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/rated/tv/episodes`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountRatedTvEpisodes200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Rated TV Episodes
   */
  async accountRatedTvEpisodes(
    requestParameters: AccountRatedTvEpisodesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountRatedTvEpisodes200Response> {
    const response = await this.accountRatedTvEpisodesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Watchlist Movies
   */
  async accountWatchlistMoviesRaw(
    requestParameters: AccountWatchlistMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountWatchlistMovies200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountWatchlistMovies."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/watchlist/movies`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountWatchlistMovies200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Watchlist Movies
   */
  async accountWatchlistMovies(
    requestParameters: AccountWatchlistMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountWatchlistMovies200Response> {
    const response = await this.accountWatchlistMoviesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Watchlist TV
   */
  async accountWatchlistTvRaw(
    requestParameters: AccountWatchlistTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AccountWatchlistTv200Response>> {
    if (
      requestParameters.accountId === null ||
      requestParameters.accountId === undefined
    ) {
      throw new runtime.RequiredError(
        "accountId",
        "Required parameter requestParameters.accountId was null or undefined when calling accountWatchlistTv."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/account/{account_id}/watchlist/tv`.replace(
          `{${"account_id"}}`,
          encodeURIComponent(String(requestParameters.accountId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AccountWatchlistTv200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Watchlist TV
   */
  async accountWatchlistTv(
    requestParameters: AccountWatchlistTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AccountWatchlistTv200Response> {
    const response = await this.accountWatchlistTvRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the TV network logos by id.
   * Images
   */
  async alternativeNamesCopyRaw(
    requestParameters: AlternativeNamesCopyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AlternativeNamesCopy200Response>> {
    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        "networkId",
        "Required parameter requestParameters.networkId was null or undefined when calling alternativeNamesCopy."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/network/{network_id}/images`.replace(
          `{${"network_id"}}`,
          encodeURIComponent(String(requestParameters.networkId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AlternativeNamesCopy200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the TV network logos by id.
   * Images
   */
  async alternativeNamesCopy(
    requestParameters: AlternativeNamesCopyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AlternativeNamesCopy200Response> {
    const response = await this.alternativeNamesCopyRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Create Guest Session
   */
  async authenticationCreateGuestSessionRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AuthenticationCreateGuestSession200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/authentication/guest_session/new`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthenticationCreateGuestSession200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Create Guest Session
   */
  async authenticationCreateGuestSession(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthenticationCreateGuestSession200Response> {
    const response = await this.authenticationCreateGuestSessionRaw(
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Create Request Token
   */
  async authenticationCreateRequestTokenRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AuthenticationCreateRequestToken200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/authentication/token/new`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthenticationCreateRequestToken200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Create Request Token
   */
  async authenticationCreateRequestToken(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthenticationCreateRequestToken200Response> {
    const response = await this.authenticationCreateRequestTokenRaw(
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Create Session
   */
  async authenticationCreateSessionRaw(
    requestParameters: AuthenticationCreateSessionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AuthenticationCreateSession200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/authentication/session/new`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthenticationCreateSession200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Create Session
   */
  async authenticationCreateSession(
    requestParameters: AuthenticationCreateSessionRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthenticationCreateSession200Response> {
    const response = await this.authenticationCreateSessionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * This method allows an application to validate a request token by entering a username and password.
   * Create Session (with login)
   */
  async authenticationCreateSessionFromLoginRaw(
    requestParameters: AuthenticationCreateSessionFromLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<AuthenticationCreateSessionFromLogin200Response>
  > {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/authentication/token/validate_with_login`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthenticationCreateSessionFromLogin200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * This method allows an application to validate a request token by entering a username and password.
   * Create Session (with login)
   */
  async authenticationCreateSessionFromLogin(
    requestParameters: AuthenticationCreateSessionFromLoginRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthenticationCreateSessionFromLogin200Response> {
    const response = await this.authenticationCreateSessionFromLoginRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Create Session (from v4 token)
   */
  async authenticationCreateSessionFromV4TokenRaw(
    requestParameters: AuthenticationCreateSessionFromV4TokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<AuthenticationCreateSessionFromV4Token200Response>
  > {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/authentication/session/convert/4`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthenticationCreateSessionFromV4Token200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Create Session (from v4 token)
   */
  async authenticationCreateSessionFromV4Token(
    requestParameters: AuthenticationCreateSessionFromV4TokenRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthenticationCreateSessionFromV4Token200Response> {
    const response = await this.authenticationCreateSessionFromV4TokenRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Delete Session
   */
  async authenticationDeleteSessionRaw(
    requestParameters: AuthenticationDeleteSessionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AuthenticationDeleteSession200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/authentication/session`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthenticationDeleteSession200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Delete Session
   */
  async authenticationDeleteSession(
    requestParameters: AuthenticationDeleteSessionRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthenticationDeleteSession200Response> {
    const response = await this.authenticationDeleteSessionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Test your API Key to see if it\'s valid.
   * Validate Key
   */
  async authenticationValidateKeyRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AuthenticationValidateKey200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/authentication`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AuthenticationValidateKey200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Test your API Key to see if it\'s valid.
   * Validate Key
   */
  async authenticationValidateKey(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthenticationValidateKey200Response> {
    const response = await this.authenticationValidateKeyRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get an up to date list of the officially supported movie certifications on TMDB.
   * Movie Certifications
   */
  async certificationMovieListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CertificationMovieList200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/certification/movie/list`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CertificationMovieList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get an up to date list of the officially supported movie certifications on TMDB.
   * Movie Certifications
   */
  async certificationMovieList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CertificationMovieList200Response> {
    const response = await this.certificationMovieListRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   * TV Certifications
   */
  async certificationsTvListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CertificationsTvList200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/certification/tv/list`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CertificationsTvList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * TV Certifications
   */
  async certificationsTvList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CertificationsTvList200Response> {
    const response = await this.certificationsTvListRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a list of all of the movie ids that have been changed in the past 24 hours.
   * Movie List
   */
  async changesMovieListRaw(
    requestParameters: ChangesMovieListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChangesMovieList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.endDate !== undefined) {
      queryParameters["end_date"] = requestParameters.endDate;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["start_date"] = requestParameters.startDate;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/changes`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChangesMovieList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of all of the movie ids that have been changed in the past 24 hours.
   * Movie List
   */
  async changesMovieList(
    requestParameters: ChangesMovieListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChangesMovieList200Response> {
    const response = await this.changesMovieListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * People List
   */
  async changesPeopleListRaw(
    requestParameters: ChangesPeopleListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChangesPeopleList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.endDate !== undefined) {
      queryParameters["end_date"] = requestParameters.endDate;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["start_date"] = requestParameters.startDate;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/changes`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChangesPeopleList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * People List
   */
  async changesPeopleList(
    requestParameters: ChangesPeopleListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChangesPeopleList200Response> {
    const response = await this.changesPeopleListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * TV List
   */
  async changesTvListRaw(
    requestParameters: ChangesTvListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChangesTvList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.endDate !== undefined) {
      queryParameters["end_date"] = requestParameters.endDate;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["start_date"] = requestParameters.startDate;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/changes`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChangesTvList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * TV List
   */
  async changesTvList(
    requestParameters: ChangesTvListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChangesTvList200Response> {
    const response = await this.changesTvListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get collection details by ID.
   * Details
   */
  async collectionDetailsRaw(
    requestParameters: CollectionDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CollectionDetails200Response>> {
    if (
      requestParameters.collectionId === null ||
      requestParameters.collectionId === undefined
    ) {
      throw new runtime.RequiredError(
        "collectionId",
        "Required parameter requestParameters.collectionId was null or undefined when calling collectionDetails."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/collection/{collection_id}`.replace(
          `{${"collection_id"}}`,
          encodeURIComponent(String(requestParameters.collectionId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CollectionDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get collection details by ID.
   * Details
   */
  async collectionDetails(
    requestParameters: CollectionDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CollectionDetails200Response> {
    const response = await this.collectionDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the images that belong to a collection.
   * Images
   */
  async collectionImagesRaw(
    requestParameters: CollectionImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CollectionImages200Response>> {
    if (
      requestParameters.collectionId === null ||
      requestParameters.collectionId === undefined
    ) {
      throw new runtime.RequiredError(
        "collectionId",
        "Required parameter requestParameters.collectionId was null or undefined when calling collectionImages."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includeImageLanguage !== undefined) {
      queryParameters["include_image_language"] =
        requestParameters.includeImageLanguage;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/collection/{collection_id}/images`.replace(
          `{${"collection_id"}}`,
          encodeURIComponent(String(requestParameters.collectionId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CollectionImages200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the images that belong to a collection.
   * Images
   */
  async collectionImages(
    requestParameters: CollectionImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CollectionImages200Response> {
    const response = await this.collectionImagesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Translations
   */
  async collectionTranslationsRaw(
    requestParameters: CollectionTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CollectionTranslations200Response>> {
    if (
      requestParameters.collectionId === null ||
      requestParameters.collectionId === undefined
    ) {
      throw new runtime.RequiredError(
        "collectionId",
        "Required parameter requestParameters.collectionId was null or undefined when calling collectionTranslations."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/collection/{collection_id}/translations`.replace(
          `{${"collection_id"}}`,
          encodeURIComponent(String(requestParameters.collectionId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CollectionTranslations200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Translations
   */
  async collectionTranslations(
    requestParameters: CollectionTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CollectionTranslations200Response> {
    const response = await this.collectionTranslationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the company details by ID.
   * Alternative Names
   */
  async companyAlternativeNamesRaw(
    requestParameters: CompanyAlternativeNamesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CompanyAlternativeNames200Response>> {
    if (
      requestParameters.companyId === null ||
      requestParameters.companyId === undefined
    ) {
      throw new runtime.RequiredError(
        "companyId",
        "Required parameter requestParameters.companyId was null or undefined when calling companyAlternativeNames."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/company/{company_id}/alternative_names`.replace(
          `{${"company_id"}}`,
          encodeURIComponent(String(requestParameters.companyId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CompanyAlternativeNames200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the company details by ID.
   * Alternative Names
   */
  async companyAlternativeNames(
    requestParameters: CompanyAlternativeNamesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CompanyAlternativeNames200Response> {
    const response = await this.companyAlternativeNamesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the company details by ID.
   * Details
   */
  async companyDetailsRaw(
    requestParameters: CompanyDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CompanyDetails200Response>> {
    if (
      requestParameters.companyId === null ||
      requestParameters.companyId === undefined
    ) {
      throw new runtime.RequiredError(
        "companyId",
        "Required parameter requestParameters.companyId was null or undefined when calling companyDetails."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/company/{company_id}`.replace(
          `{${"company_id"}}`,
          encodeURIComponent(String(requestParameters.companyId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CompanyDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the company details by ID.
   * Details
   */
  async companyDetails(
    requestParameters: CompanyDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CompanyDetails200Response> {
    const response = await this.companyDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the company logos by id.
   * Images
   */
  async companyImagesRaw(
    requestParameters: CompanyImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CompanyImages200Response>> {
    if (
      requestParameters.companyId === null ||
      requestParameters.companyId === undefined
    ) {
      throw new runtime.RequiredError(
        "companyId",
        "Required parameter requestParameters.companyId was null or undefined when calling companyImages."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/company/{company_id}/images`.replace(
          `{${"company_id"}}`,
          encodeURIComponent(String(requestParameters.companyId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CompanyImages200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the company logos by id.
   * Images
   */
  async companyImages(
    requestParameters: CompanyImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CompanyImages200Response> {
    const response = await this.companyImagesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the list of countries (ISO 3166-1 tags) used throughout TMDB.
   * Countries
   */
  async configurationCountriesRaw(
    requestParameters: ConfigurationCountriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/configuration/countries`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the list of countries (ISO 3166-1 tags) used throughout TMDB.
   * Countries
   */
  async configurationCountries(
    requestParameters: ConfigurationCountriesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.configurationCountriesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Query the API configuration details.
   * Details
   */
  async configurationDetailsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ConfigurationDetails200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/configuration`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ConfigurationDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Query the API configuration details.
   * Details
   */
  async configurationDetails(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ConfigurationDetails200Response> {
    const response = await this.configurationDetailsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get the list of the jobs and departments we use on TMDB.
   * Jobs
   */
  async configurationJobsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/configuration/jobs`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the list of the jobs and departments we use on TMDB.
   * Jobs
   */
  async configurationJobs(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.configurationJobsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get the list of languages (ISO 639-1 tags) used throughout TMDB.
   * Languages
   */
  async configurationLanguagesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/configuration/languages`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the list of languages (ISO 639-1 tags) used throughout TMDB.
   * Languages
   */
  async configurationLanguages(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.configurationLanguagesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a list of the officially supported translations on TMDB.
   * Primary Translations
   */
  async configurationPrimaryTranslationsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/configuration/primary_translations`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get a list of the officially supported translations on TMDB.
   * Primary Translations
   */
  async configurationPrimaryTranslations(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.configurationPrimaryTranslationsRaw(
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the list of timezones used throughout TMDB.
   * Timezones
   */
  async configurationTimezonesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/configuration/timezones`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the list of timezones used throughout TMDB.
   * Timezones
   */
  async configurationTimezones(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.configurationTimezonesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a movie or TV credit details by ID.
   * Details
   */
  async creditDetailsRaw(
    requestParameters: CreditDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreditDetails200Response>> {
    if (
      requestParameters.creditId === null ||
      requestParameters.creditId === undefined
    ) {
      throw new runtime.RequiredError(
        "creditId",
        "Required parameter requestParameters.creditId was null or undefined when calling creditDetails."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/credit/{credit_id}`.replace(
          `{${"credit_id"}}`,
          encodeURIComponent(String(requestParameters.creditId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreditDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a movie or TV credit details by ID.
   * Details
   */
  async creditDetails(
    requestParameters: CreditDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreditDetails200Response> {
    const response = await this.creditDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the alternative names of a network.
   * Alternative Names
   */
  async detailsCopyRaw(
    requestParameters: DetailsCopyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<DetailsCopy200Response>> {
    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        "networkId",
        "Required parameter requestParameters.networkId was null or undefined when calling detailsCopy."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/network/{network_id}/alternative_names`.replace(
          `{${"network_id"}}`,
          encodeURIComponent(String(requestParameters.networkId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DetailsCopy200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the alternative names of a network.
   * Alternative Names
   */
  async detailsCopy(
    requestParameters: DetailsCopyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<DetailsCopy200Response> {
    const response = await this.detailsCopyRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Find movies using over 30 filters and sort options.
   * Movie
   */
  async discoverMovieRaw(
    requestParameters: DiscoverMovieRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<DiscoverMovie200Response>> {
    const queryParameters: any = {};

    if (requestParameters.certification !== undefined) {
      queryParameters["certification"] = requestParameters.certification;
    }

    if (requestParameters.certificationGte !== undefined) {
      queryParameters["certification.gte"] = requestParameters.certificationGte;
    }

    if (requestParameters.certificationLte !== undefined) {
      queryParameters["certification.lte"] = requestParameters.certificationLte;
    }

    if (requestParameters.certificationCountry !== undefined) {
      queryParameters["certification_country"] =
        requestParameters.certificationCountry;
    }

    if (requestParameters.includeAdult !== undefined) {
      queryParameters["include_adult"] = requestParameters.includeAdult;
    }

    if (requestParameters.includeVideo !== undefined) {
      queryParameters["include_video"] = requestParameters.includeVideo;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.primaryReleaseYear !== undefined) {
      queryParameters["primary_release_year"] =
        requestParameters.primaryReleaseYear;
    }

    if (requestParameters.primaryReleaseDateGte !== undefined) {
      queryParameters["primary_release_date.gte"] =
        requestParameters.primaryReleaseDateGte;
    }

    if (requestParameters.primaryReleaseDateLte !== undefined) {
      queryParameters["primary_release_date.lte"] =
        requestParameters.primaryReleaseDateLte;
    }

    if (requestParameters.region !== undefined) {
      queryParameters["region"] = requestParameters.region;
    }

    if (requestParameters.releaseDateGte !== undefined) {
      queryParameters["release_date.gte"] = requestParameters.releaseDateGte;
    }

    if (requestParameters.releaseDateLte !== undefined) {
      queryParameters["release_date.lte"] = requestParameters.releaseDateLte;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    if (requestParameters.voteAverageGte !== undefined) {
      queryParameters["vote_average.gte"] = requestParameters.voteAverageGte;
    }

    if (requestParameters.voteAverageLte !== undefined) {
      queryParameters["vote_average.lte"] = requestParameters.voteAverageLte;
    }

    if (requestParameters.voteCountGte !== undefined) {
      queryParameters["vote_count.gte"] = requestParameters.voteCountGte;
    }

    if (requestParameters.voteCountLte !== undefined) {
      queryParameters["vote_count.lte"] = requestParameters.voteCountLte;
    }

    if (requestParameters.watchRegion !== undefined) {
      queryParameters["watch_region"] = requestParameters.watchRegion;
    }

    if (requestParameters.withCast !== undefined) {
      queryParameters["with_cast"] = requestParameters.withCast;
    }

    if (requestParameters.withCompanies !== undefined) {
      queryParameters["with_companies"] = requestParameters.withCompanies;
    }

    if (requestParameters.withCrew !== undefined) {
      queryParameters["with_crew"] = requestParameters.withCrew;
    }

    if (requestParameters.withGenres !== undefined) {
      queryParameters["with_genres"] = requestParameters.withGenres;
    }

    if (requestParameters.withKeywords !== undefined) {
      queryParameters["with_keywords"] = requestParameters.withKeywords;
    }

    if (requestParameters.withOriginCountry !== undefined) {
      queryParameters["with_origin_country"] =
        requestParameters.withOriginCountry;
    }

    if (requestParameters.withOriginalLanguage !== undefined) {
      queryParameters["with_original_language"] =
        requestParameters.withOriginalLanguage;
    }

    if (requestParameters.withPeople !== undefined) {
      queryParameters["with_people"] = requestParameters.withPeople;
    }

    if (requestParameters.withReleaseType !== undefined) {
      queryParameters["with_release_type"] = requestParameters.withReleaseType;
    }

    if (requestParameters.withRuntimeGte !== undefined) {
      queryParameters["with_runtime.gte"] = requestParameters.withRuntimeGte;
    }

    if (requestParameters.withRuntimeLte !== undefined) {
      queryParameters["with_runtime.lte"] = requestParameters.withRuntimeLte;
    }

    if (requestParameters.withWatchMonetizationTypes !== undefined) {
      queryParameters["with_watch_monetization_types"] =
        requestParameters.withWatchMonetizationTypes;
    }

    if (requestParameters.withWatchProviders !== undefined) {
      queryParameters["with_watch_providers"] =
        requestParameters.withWatchProviders;
    }

    if (requestParameters.withoutCompanies !== undefined) {
      queryParameters["without_companies"] = requestParameters.withoutCompanies;
    }

    if (requestParameters.withoutGenres !== undefined) {
      queryParameters["without_genres"] = requestParameters.withoutGenres;
    }

    if (requestParameters.withoutKeywords !== undefined) {
      queryParameters["without_keywords"] = requestParameters.withoutKeywords;
    }

    if (requestParameters.withoutWatchProviders !== undefined) {
      queryParameters["without_watch_providers"] =
        requestParameters.withoutWatchProviders;
    }

    if (requestParameters.year !== undefined) {
      queryParameters["year"] = requestParameters.year;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/discover/movie`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DiscoverMovie200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Find movies using over 30 filters and sort options.
   * Movie
   */
  async discoverMovie(
    requestParameters: DiscoverMovieRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<DiscoverMovie200Response> {
    const response = await this.discoverMovieRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Find TV shows using over 30 filters and sort options.
   * TV
   */
  async discoverTvRaw(
    requestParameters: DiscoverTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<DiscoverTv200Response>> {
    const queryParameters: any = {};

    if (requestParameters.airDateGte !== undefined) {
      queryParameters["air_date.gte"] = requestParameters.airDateGte;
    }

    if (requestParameters.airDateLte !== undefined) {
      queryParameters["air_date.lte"] = requestParameters.airDateLte;
    }

    if (requestParameters.firstAirDateYear !== undefined) {
      queryParameters["first_air_date_year"] =
        requestParameters.firstAirDateYear;
    }

    if (requestParameters.firstAirDateGte !== undefined) {
      queryParameters["first_air_date.gte"] = requestParameters.firstAirDateGte;
    }

    if (requestParameters.firstAirDateLte !== undefined) {
      queryParameters["first_air_date.lte"] = requestParameters.firstAirDateLte;
    }

    if (requestParameters.includeAdult !== undefined) {
      queryParameters["include_adult"] = requestParameters.includeAdult;
    }

    if (requestParameters.includeNullFirstAirDates !== undefined) {
      queryParameters["include_null_first_air_dates"] =
        requestParameters.includeNullFirstAirDates;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.screenedTheatrically !== undefined) {
      queryParameters["screened_theatrically"] =
        requestParameters.screenedTheatrically;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    if (requestParameters.timezone !== undefined) {
      queryParameters["timezone"] = requestParameters.timezone;
    }

    if (requestParameters.voteAverageGte !== undefined) {
      queryParameters["vote_average.gte"] = requestParameters.voteAverageGte;
    }

    if (requestParameters.voteAverageLte !== undefined) {
      queryParameters["vote_average.lte"] = requestParameters.voteAverageLte;
    }

    if (requestParameters.voteCountGte !== undefined) {
      queryParameters["vote_count.gte"] = requestParameters.voteCountGte;
    }

    if (requestParameters.voteCountLte !== undefined) {
      queryParameters["vote_count.lte"] = requestParameters.voteCountLte;
    }

    if (requestParameters.watchRegion !== undefined) {
      queryParameters["watch_region"] = requestParameters.watchRegion;
    }

    if (requestParameters.withCompanies !== undefined) {
      queryParameters["with_companies"] = requestParameters.withCompanies;
    }

    if (requestParameters.withGenres !== undefined) {
      queryParameters["with_genres"] = requestParameters.withGenres;
    }

    if (requestParameters.withKeywords !== undefined) {
      queryParameters["with_keywords"] = requestParameters.withKeywords;
    }

    if (requestParameters.withNetworks !== undefined) {
      queryParameters["with_networks"] = requestParameters.withNetworks;
    }

    if (requestParameters.withOriginCountry !== undefined) {
      queryParameters["with_origin_country"] =
        requestParameters.withOriginCountry;
    }

    if (requestParameters.withOriginalLanguage !== undefined) {
      queryParameters["with_original_language"] =
        requestParameters.withOriginalLanguage;
    }

    if (requestParameters.withRuntimeGte !== undefined) {
      queryParameters["with_runtime.gte"] = requestParameters.withRuntimeGte;
    }

    if (requestParameters.withRuntimeLte !== undefined) {
      queryParameters["with_runtime.lte"] = requestParameters.withRuntimeLte;
    }

    if (requestParameters.withStatus !== undefined) {
      queryParameters["with_status"] = requestParameters.withStatus;
    }

    if (requestParameters.withWatchMonetizationTypes !== undefined) {
      queryParameters["with_watch_monetization_types"] =
        requestParameters.withWatchMonetizationTypes;
    }

    if (requestParameters.withWatchProviders !== undefined) {
      queryParameters["with_watch_providers"] =
        requestParameters.withWatchProviders;
    }

    if (requestParameters.withoutCompanies !== undefined) {
      queryParameters["without_companies"] = requestParameters.withoutCompanies;
    }

    if (requestParameters.withoutGenres !== undefined) {
      queryParameters["without_genres"] = requestParameters.withoutGenres;
    }

    if (requestParameters.withoutKeywords !== undefined) {
      queryParameters["without_keywords"] = requestParameters.withoutKeywords;
    }

    if (requestParameters.withoutWatchProviders !== undefined) {
      queryParameters["without_watch_providers"] =
        requestParameters.withoutWatchProviders;
    }

    if (requestParameters.withType !== undefined) {
      queryParameters["with_type"] = requestParameters.withType;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/discover/tv`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DiscoverTv200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Find TV shows using over 30 filters and sort options.
   * TV
   */
  async discoverTv(
    requestParameters: DiscoverTvRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<DiscoverTv200Response> {
    const response = await this.discoverTvRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Find data by external ID\'s.
   * Find By ID
   */
  async findByIdRaw(
    requestParameters: FindByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<FindById200Response>> {
    if (
      requestParameters.externalId === null ||
      requestParameters.externalId === undefined
    ) {
      throw new runtime.RequiredError(
        "externalId",
        "Required parameter requestParameters.externalId was null or undefined when calling findById."
      );
    }

    if (
      requestParameters.externalSource === null ||
      requestParameters.externalSource === undefined
    ) {
      throw new runtime.RequiredError(
        "externalSource",
        "Required parameter requestParameters.externalSource was null or undefined when calling findById."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.externalSource !== undefined) {
      queryParameters["external_source"] = requestParameters.externalSource;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/find/{external_id}`.replace(
          `{${"external_id"}}`,
          encodeURIComponent(String(requestParameters.externalId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FindById200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Find data by external ID\'s.
   * Find By ID
   */
  async findById(
    requestParameters: FindByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<FindById200Response> {
    const response = await this.findByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get the list of official genres for movies.
   * Movie List
   */
  async genreMovieListRaw(
    requestParameters: GenreMovieListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GenreMovieList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/genre/movie/list`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GenreMovieList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the list of official genres for movies.
   * Movie List
   */
  async genreMovieList(
    requestParameters: GenreMovieListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GenreMovieList200Response> {
    const response = await this.genreMovieListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the list of official genres for TV shows.
   * TV List
   */
  async genreTvListRaw(
    requestParameters: GenreTvListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GenreTvList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/genre/tv/list`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GenreTvList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the list of official genres for TV shows.
   * TV List
   */
  async genreTvList(
    requestParameters: GenreTvListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GenreTvList200Response> {
    const response = await this.genreTvListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the rated movies for a guest session.
   * Rated Movies
   */
  async guestSessionRatedMoviesRaw(
    requestParameters: GuestSessionRatedMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GuestSessionRatedMovies200Response>> {
    if (
      requestParameters.guestSessionId === null ||
      requestParameters.guestSessionId === undefined
    ) {
      throw new runtime.RequiredError(
        "guestSessionId",
        "Required parameter requestParameters.guestSessionId was null or undefined when calling guestSessionRatedMovies."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/guest_session/{guest_session_id}/rated/movies`.replace(
          `{${"guest_session_id"}}`,
          encodeURIComponent(String(requestParameters.guestSessionId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GuestSessionRatedMovies200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the rated movies for a guest session.
   * Rated Movies
   */
  async guestSessionRatedMovies(
    requestParameters: GuestSessionRatedMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GuestSessionRatedMovies200Response> {
    const response = await this.guestSessionRatedMoviesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the rated TV shows for a guest session.
   * Rated TV
   */
  async guestSessionRatedTvRaw(
    requestParameters: GuestSessionRatedTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GuestSessionRatedTv200Response>> {
    if (
      requestParameters.guestSessionId === null ||
      requestParameters.guestSessionId === undefined
    ) {
      throw new runtime.RequiredError(
        "guestSessionId",
        "Required parameter requestParameters.guestSessionId was null or undefined when calling guestSessionRatedTv."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/guest_session/{guest_session_id}/rated/tv`.replace(
          `{${"guest_session_id"}}`,
          encodeURIComponent(String(requestParameters.guestSessionId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GuestSessionRatedTv200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the rated TV shows for a guest session.
   * Rated TV
   */
  async guestSessionRatedTv(
    requestParameters: GuestSessionRatedTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GuestSessionRatedTv200Response> {
    const response = await this.guestSessionRatedTvRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the rated TV episodes for a guest session.
   * Rated TV Episodes
   */
  async guestSessionRatedTvEpisodesRaw(
    requestParameters: GuestSessionRatedTvEpisodesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GuestSessionRatedTvEpisodes200Response>> {
    if (
      requestParameters.guestSessionId === null ||
      requestParameters.guestSessionId === undefined
    ) {
      throw new runtime.RequiredError(
        "guestSessionId",
        "Required parameter requestParameters.guestSessionId was null or undefined when calling guestSessionRatedTvEpisodes."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["sort_by"] = requestParameters.sortBy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/guest_session/{guest_session_id}/rated/tv/episodes`.replace(
          `{${"guest_session_id"}}`,
          encodeURIComponent(String(requestParameters.guestSessionId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GuestSessionRatedTvEpisodes200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the rated TV episodes for a guest session.
   * Rated TV Episodes
   */
  async guestSessionRatedTvEpisodes(
    requestParameters: GuestSessionRatedTvEpisodesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GuestSessionRatedTvEpisodes200Response> {
    const response = await this.guestSessionRatedTvEpisodesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Details
   */
  async keywordDetailsRaw(
    requestParameters: KeywordDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<KeywordDetails200Response>> {
    if (
      requestParameters.keywordId === null ||
      requestParameters.keywordId === undefined
    ) {
      throw new runtime.RequiredError(
        "keywordId",
        "Required parameter requestParameters.keywordId was null or undefined when calling keywordDetails."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/keyword/{keyword_id}`.replace(
          `{${"keyword_id"}}`,
          encodeURIComponent(String(requestParameters.keywordId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeywordDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Details
   */
  async keywordDetails(
    requestParameters: KeywordDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<KeywordDetails200Response> {
    const response = await this.keywordDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Movies
   */
  async keywordMoviesRaw(
    requestParameters: KeywordMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<KeywordMovies200Response>> {
    if (
      requestParameters.keywordId === null ||
      requestParameters.keywordId === undefined
    ) {
      throw new runtime.RequiredError(
        "keywordId",
        "Required parameter requestParameters.keywordId was null or undefined when calling keywordMovies."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includeAdult !== undefined) {
      queryParameters["include_adult"] = requestParameters.includeAdult;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/keyword/{keyword_id}/movies`.replace(
          `{${"keyword_id"}}`,
          encodeURIComponent(String(requestParameters.keywordId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeywordMovies200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Movies
   */
  async keywordMovies(
    requestParameters: KeywordMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<KeywordMovies200Response> {
    const response = await this.keywordMoviesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Add a movie to a list.
   * Add Movie
   */
  async listAddMovieRaw(
    requestParameters: ListAddMovieOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListDelete200Response>> {
    if (
      requestParameters.listId === null ||
      requestParameters.listId === undefined
    ) {
      throw new runtime.RequiredError(
        "listId",
        "Required parameter requestParameters.listId was null or undefined when calling listAddMovie."
      );
    }

    if (
      requestParameters.sessionId === null ||
      requestParameters.sessionId === undefined
    ) {
      throw new runtime.RequiredError(
        "sessionId",
        "Required parameter requestParameters.sessionId was null or undefined when calling listAddMovie."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/list/{list_id}/add_item`.replace(
          `{${"list_id"}}`,
          encodeURIComponent(String(requestParameters.listId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ListAddMovieRequestToJSON(requestParameters.listAddMovieRequest),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListDelete200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Add a movie to a list.
   * Add Movie
   */
  async listAddMovie(
    requestParameters: ListAddMovieOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListDelete200Response> {
    const response = await this.listAddMovieRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Use this method to check if an item has already been added to the list.
   * Check Item Status
   */
  async listCheckItemStatusRaw(
    requestParameters: ListCheckItemStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListCheckItemStatus200Response>> {
    if (
      requestParameters.listId === null ||
      requestParameters.listId === undefined
    ) {
      throw new runtime.RequiredError(
        "listId",
        "Required parameter requestParameters.listId was null or undefined when calling listCheckItemStatus."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.movieId !== undefined) {
      queryParameters["movie_id"] = requestParameters.movieId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/list/{list_id}/item_status`.replace(
          `{${"list_id"}}`,
          encodeURIComponent(String(requestParameters.listId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListCheckItemStatus200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Use this method to check if an item has already been added to the list.
   * Check Item Status
   */
  async listCheckItemStatus(
    requestParameters: ListCheckItemStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListCheckItemStatus200Response> {
    const response = await this.listCheckItemStatusRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Clear all items from a list.
   * Clear
   */
  async listClearRaw(
    requestParameters: ListClearRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListDelete200Response>> {
    if (
      requestParameters.listId === null ||
      requestParameters.listId === undefined
    ) {
      throw new runtime.RequiredError(
        "listId",
        "Required parameter requestParameters.listId was null or undefined when calling listClear."
      );
    }

    if (
      requestParameters.sessionId === null ||
      requestParameters.sessionId === undefined
    ) {
      throw new runtime.RequiredError(
        "sessionId",
        "Required parameter requestParameters.sessionId was null or undefined when calling listClear."
      );
    }

    if (
      requestParameters.confirm === null ||
      requestParameters.confirm === undefined
    ) {
      throw new runtime.RequiredError(
        "confirm",
        "Required parameter requestParameters.confirm was null or undefined when calling listClear."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.confirm !== undefined) {
      queryParameters["confirm"] = requestParameters.confirm;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/list/{list_id}/clear`.replace(
          `{${"list_id"}}`,
          encodeURIComponent(String(requestParameters.listId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListDelete200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Clear all items from a list.
   * Clear
   */
  async listClear(
    requestParameters: ListClearRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListDelete200Response> {
    const response = await this.listClearRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   *
   * Create
   */
  async listCreateRaw(
    requestParameters: ListCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListCreate200Response>> {
    if (
      requestParameters.sessionId === null ||
      requestParameters.sessionId === undefined
    ) {
      throw new runtime.RequiredError(
        "sessionId",
        "Required parameter requestParameters.sessionId was null or undefined when calling listCreate."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/list`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListCreate200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Create
   */
  async listCreate(
    requestParameters: ListCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListCreate200Response> {
    const response = await this.listCreateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete a list.
   * Delete
   */
  async listDeleteRaw(
    requestParameters: ListDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListDelete200Response>> {
    if (
      requestParameters.listId === null ||
      requestParameters.listId === undefined
    ) {
      throw new runtime.RequiredError(
        "listId",
        "Required parameter requestParameters.listId was null or undefined when calling listDelete."
      );
    }

    if (
      requestParameters.sessionId === null ||
      requestParameters.sessionId === undefined
    ) {
      throw new runtime.RequiredError(
        "sessionId",
        "Required parameter requestParameters.sessionId was null or undefined when calling listDelete."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/list/{list_id}`.replace(
          `{${"list_id"}}`,
          encodeURIComponent(String(requestParameters.listId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListDelete200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Delete a list.
   * Delete
   */
  async listDelete(
    requestParameters: ListDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListDelete200Response> {
    const response = await this.listDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   *
   * Details
   */
  async listDetailsRaw(
    requestParameters: ListDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListDetails200Response>> {
    if (
      requestParameters.listId === null ||
      requestParameters.listId === undefined
    ) {
      throw new runtime.RequiredError(
        "listId",
        "Required parameter requestParameters.listId was null or undefined when calling listDetails."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/list/{list_id}`.replace(
          `{${"list_id"}}`,
          encodeURIComponent(String(requestParameters.listId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Details
   */
  async listDetails(
    requestParameters: ListDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListDetails200Response> {
    const response = await this.listDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Remove a movie from a list.
   * Remove Movie
   */
  async listRemoveMovieRaw(
    requestParameters: ListRemoveMovieRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieDeleteRating200Response>> {
    if (
      requestParameters.listId === null ||
      requestParameters.listId === undefined
    ) {
      throw new runtime.RequiredError(
        "listId",
        "Required parameter requestParameters.listId was null or undefined when calling listRemoveMovie."
      );
    }

    if (
      requestParameters.sessionId === null ||
      requestParameters.sessionId === undefined
    ) {
      throw new runtime.RequiredError(
        "sessionId",
        "Required parameter requestParameters.sessionId was null or undefined when calling listRemoveMovie."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/list/{list_id}/remove_item`.replace(
          `{${"list_id"}}`,
          encodeURIComponent(String(requestParameters.listId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieDeleteRating200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Remove a movie from a list.
   * Remove Movie
   */
  async listRemoveMovie(
    requestParameters: ListRemoveMovieRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieDeleteRating200Response> {
    const response = await this.listRemoveMovieRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the rating, watchlist and favourite status of an account.
   * Account States
   */
  async movieAccountStatesRaw(
    requestParameters: MovieAccountStatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieAccountStates200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieAccountStates."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/account_states`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieAccountStates200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the rating, watchlist and favourite status of an account.
   * Account States
   */
  async movieAccountStates(
    requestParameters: MovieAccountStatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieAccountStates200Response> {
    const response = await this.movieAccountStatesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Rate a movie and save it to your rated list.
   * Add Rating
   */
  async movieAddRatingRaw(
    requestParameters: MovieAddRatingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieAddRating200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieAddRating."
      );
    }

    if (
      requestParameters.contentType === null ||
      requestParameters.contentType === undefined
    ) {
      throw new runtime.RequiredError(
        "contentType",
        "Required parameter requestParameters.contentType was null or undefined when calling movieAddRating."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.contentType !== undefined &&
      requestParameters.contentType !== null
    ) {
      headerParameters["Content-Type"] = String(requestParameters.contentType);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/rating`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieAddRating200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Rate a movie and save it to your rated list.
   * Add Rating
   */
  async movieAddRating(
    requestParameters: MovieAddRatingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieAddRating200Response> {
    const response = await this.movieAddRatingRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the alternative titles for a movie.
   * Alternative Titles
   */
  async movieAlternativeTitlesRaw(
    requestParameters: MovieAlternativeTitlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieAlternativeTitles200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieAlternativeTitles."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.country !== undefined) {
      queryParameters["country"] = requestParameters.country;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/alternative_titles`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieAlternativeTitles200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the alternative titles for a movie.
   * Alternative Titles
   */
  async movieAlternativeTitles(
    requestParameters: MovieAlternativeTitlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieAlternativeTitles200Response> {
    const response = await this.movieAlternativeTitlesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the recent changes for a movie.
   * Changes
   */
  async movieChangesRaw(
    requestParameters: MovieChangesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieChanges."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.endDate !== undefined) {
      queryParameters["end_date"] = requestParameters.endDate;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["start_date"] = requestParameters.startDate;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/changes`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Get the recent changes for a movie.
   * Changes
   */
  async movieChanges(
    requestParameters: MovieChangesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.movieChangesRaw(requestParameters, initOverrides);
  }

  /**
   *
   * Credits
   */
  async movieCreditsRaw(
    requestParameters: MovieCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieCredits200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieCredits."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/credits`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieCredits200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Credits
   */
  async movieCredits(
    requestParameters: MovieCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieCredits200Response> {
    const response = await this.movieCreditsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Delete a user rating.
   * Delete Rating
   */
  async movieDeleteRatingRaw(
    requestParameters: MovieDeleteRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieDeleteRating200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieDeleteRating."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.contentType !== undefined &&
      requestParameters.contentType !== null
    ) {
      headerParameters["Content-Type"] = String(requestParameters.contentType);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/rating`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieDeleteRating200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Delete a user rating.
   * Delete Rating
   */
  async movieDeleteRating(
    requestParameters: MovieDeleteRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieDeleteRating200Response> {
    const response = await this.movieDeleteRatingRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the top level details of a movie by ID.
   * Details
   */
  async movieDetailsRaw(
    requestParameters: MovieDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieDetails200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieDetails."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.appendToResponse !== undefined) {
      queryParameters["append_to_response"] =
        requestParameters.appendToResponse;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the top level details of a movie by ID.
   * Details
   */
  async movieDetails(
    requestParameters: MovieDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieDetails200Response> {
    const response = await this.movieDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * External IDs
   */
  async movieExternalIdsRaw(
    requestParameters: MovieExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieExternalIds200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieExternalIds."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/external_ids`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieExternalIds200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * External IDs
   */
  async movieExternalIds(
    requestParameters: MovieExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieExternalIds200Response> {
    const response = await this.movieExternalIdsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the images that belong to a movie.
   * Images
   */
  async movieImagesRaw(
    requestParameters: MovieImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieImages200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieImages."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includeImageLanguage !== undefined) {
      queryParameters["include_image_language"] =
        requestParameters.includeImageLanguage;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/images`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieImages200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the images that belong to a movie.
   * Images
   */
  async movieImages(
    requestParameters: MovieImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieImages200Response> {
    const response = await this.movieImagesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Keywords
   */
  async movieKeywordsRaw(
    requestParameters: MovieKeywordsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieKeywords200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieKeywords."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/keywords`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieKeywords200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Keywords
   */
  async movieKeywords(
    requestParameters: MovieKeywordsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieKeywords200Response> {
    const response = await this.movieKeywordsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the newest movie ID.
   * Latest
   */
  async movieLatestIdRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieLatestId200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/latest`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieLatestId200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the newest movie ID.
   * Latest
   */
  async movieLatestId(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieLatestId200Response> {
    const response = await this.movieLatestIdRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   * Lists
   */
  async movieListsRaw(
    requestParameters: MovieListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieLists200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieLists."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/lists`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieLists200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Lists
   */
  async movieLists(
    requestParameters: MovieListsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieLists200Response> {
    const response = await this.movieListsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a list of movies that are currently in theatres.
   * Now Playing
   */
  async movieNowPlayingListRaw(
    requestParameters: MovieNowPlayingListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieNowPlayingList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.region !== undefined) {
      queryParameters["region"] = requestParameters.region;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/now_playing`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieNowPlayingList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of movies that are currently in theatres.
   * Now Playing
   */
  async movieNowPlayingList(
    requestParameters: MovieNowPlayingListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieNowPlayingList200Response> {
    const response = await this.movieNowPlayingListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of movies ordered by popularity.
   * Popular
   */
  async moviePopularListRaw(
    requestParameters: MoviePopularListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MoviePopularList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.region !== undefined) {
      queryParameters["region"] = requestParameters.region;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/popular`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MoviePopularList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of movies ordered by popularity.
   * Popular
   */
  async moviePopularList(
    requestParameters: MoviePopularListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MoviePopularList200Response> {
    const response = await this.moviePopularListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Recommendations
   */
  async movieRecommendationsRaw(
    requestParameters: MovieRecommendationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieRecommendations."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/recommendations`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   *
   * Recommendations
   */
  async movieRecommendations(
    requestParameters: MovieRecommendationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.movieRecommendationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the release dates and certifications for a movie.
   * Release Dates
   */
  async movieReleaseDatesRaw(
    requestParameters: MovieReleaseDatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieReleaseDates200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieReleaseDates."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/release_dates`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieReleaseDates200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the release dates and certifications for a movie.
   * Release Dates
   */
  async movieReleaseDates(
    requestParameters: MovieReleaseDatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieReleaseDates200Response> {
    const response = await this.movieReleaseDatesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the user reviews for a movie.
   * Reviews
   */
  async movieReviewsRaw(
    requestParameters: MovieReviewsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieReviews200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieReviews."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/reviews`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieReviews200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the user reviews for a movie.
   * Reviews
   */
  async movieReviews(
    requestParameters: MovieReviewsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieReviews200Response> {
    const response = await this.movieReviewsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the similar movies based on genres and keywords.
   * Similar
   */
  async movieSimilarRaw(
    requestParameters: MovieSimilarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieSimilar200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieSimilar."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/similar`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieSimilar200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the similar movies based on genres and keywords.
   * Similar
   */
  async movieSimilar(
    requestParameters: MovieSimilarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieSimilar200Response> {
    const response = await this.movieSimilarRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of movies ordered by rating.
   * Top Rated
   */
  async movieTopRatedListRaw(
    requestParameters: MovieTopRatedListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieTopRatedList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.region !== undefined) {
      queryParameters["region"] = requestParameters.region;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/top_rated`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieTopRatedList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of movies ordered by rating.
   * Top Rated
   */
  async movieTopRatedList(
    requestParameters: MovieTopRatedListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieTopRatedList200Response> {
    const response = await this.movieTopRatedListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the translations for a movie.
   * Translations
   */
  async movieTranslationsRaw(
    requestParameters: MovieTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieTranslations200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieTranslations."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/translations`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieTranslations200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the translations for a movie.
   * Translations
   */
  async movieTranslations(
    requestParameters: MovieTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieTranslations200Response> {
    const response = await this.movieTranslationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of movies that are being released soon.
   * Upcoming
   */
  async movieUpcomingListRaw(
    requestParameters: MovieUpcomingListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieUpcomingList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.region !== undefined) {
      queryParameters["region"] = requestParameters.region;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/upcoming`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieUpcomingList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of movies that are being released soon.
   * Upcoming
   */
  async movieUpcomingList(
    requestParameters: MovieUpcomingListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieUpcomingList200Response> {
    const response = await this.movieUpcomingListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Videos
   */
  async movieVideosRaw(
    requestParameters: MovieVideosRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieVideos200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieVideos."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/videos`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieVideos200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Videos
   */
  async movieVideos(
    requestParameters: MovieVideosRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieVideos200Response> {
    const response = await this.movieVideosRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the list of streaming providers we have for a movie.
   * Watch Providers
   */
  async movieWatchProvidersRaw(
    requestParameters: MovieWatchProvidersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieWatchProviders200Response>> {
    if (
      requestParameters.movieId === null ||
      requestParameters.movieId === undefined
    ) {
      throw new runtime.RequiredError(
        "movieId",
        "Required parameter requestParameters.movieId was null or undefined when calling movieWatchProviders."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/movie/{movie_id}/watch/providers`.replace(
          `{${"movie_id"}}`,
          encodeURIComponent(String(requestParameters.movieId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieWatchProviders200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the list of streaming providers we have for a movie.
   * Watch Providers
   */
  async movieWatchProviders(
    requestParameters: MovieWatchProvidersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieWatchProviders200Response> {
    const response = await this.movieWatchProvidersRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Details
   */
  async networkDetailsRaw(
    requestParameters: NetworkDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<NetworkDetails200Response>> {
    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        "networkId",
        "Required parameter requestParameters.networkId was null or undefined when calling networkDetails."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/network/{network_id}`.replace(
          `{${"network_id"}}`,
          encodeURIComponent(String(requestParameters.networkId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworkDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Details
   */
  async networkDetails(
    requestParameters: NetworkDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<NetworkDetails200Response> {
    const response = await this.networkDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the recent changes for a person.
   * Changes
   */
  async personChangesRaw(
    requestParameters: PersonChangesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersonChanges200Response>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling personChanges."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.endDate !== undefined) {
      queryParameters["end_date"] = requestParameters.endDate;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["start_date"] = requestParameters.startDate;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/{person_id}/changes`.replace(
          `{${"person_id"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonChanges200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the recent changes for a person.
   * Changes
   */
  async personChanges(
    requestParameters: PersonChangesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersonChanges200Response> {
    const response = await this.personChangesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the combined movie and TV credits that belong to a person.
   * Combined Credits
   */
  async personCombinedCreditsRaw(
    requestParameters: PersonCombinedCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersonCombinedCredits200Response>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling personCombinedCredits."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/{person_id}/combined_credits`.replace(
          `{${"person_id"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonCombinedCredits200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the combined movie and TV credits that belong to a person.
   * Combined Credits
   */
  async personCombinedCredits(
    requestParameters: PersonCombinedCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersonCombinedCredits200Response> {
    const response = await this.personCombinedCreditsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Query the top level details of a person.
   * Details
   */
  async personDetailsRaw(
    requestParameters: PersonDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersonDetails200Response>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling personDetails."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.appendToResponse !== undefined) {
      queryParameters["append_to_response"] =
        requestParameters.appendToResponse;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/{person_id}`.replace(
          `{${"person_id"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Query the top level details of a person.
   * Details
   */
  async personDetails(
    requestParameters: PersonDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersonDetails200Response> {
    const response = await this.personDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the external ID\'s that belong to a person.
   * External IDs
   */
  async personExternalIdsRaw(
    requestParameters: PersonExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersonExternalIds200Response>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling personExternalIds."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/{person_id}/external_ids`.replace(
          `{${"person_id"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonExternalIds200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the external ID\'s that belong to a person.
   * External IDs
   */
  async personExternalIds(
    requestParameters: PersonExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersonExternalIds200Response> {
    const response = await this.personExternalIdsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the profile images that belong to a person.
   * Images
   */
  async personImagesRaw(
    requestParameters: PersonImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling personImages."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/{person_id}/images`.replace(
          `{${"person_id"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the profile images that belong to a person.
   * Images
   */
  async personImages(
    requestParameters: PersonImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.personImagesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the newest created person. This is a live response and will continuously change.
   * Latest
   */
  async personLatestIdRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersonLatestId200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/latest`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonLatestId200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the newest created person. This is a live response and will continuously change.
   * Latest
   */
  async personLatestId(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersonLatestId200Response> {
    const response = await this.personLatestIdRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get the movie credits for a person.
   * Movie Credits
   */
  async personMovieCreditsRaw(
    requestParameters: PersonMovieCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersonMovieCredits200Response>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling personMovieCredits."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/{person_id}/movie_credits`.replace(
          `{${"person_id"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonMovieCredits200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the movie credits for a person.
   * Movie Credits
   */
  async personMovieCredits(
    requestParameters: PersonMovieCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersonMovieCredits200Response> {
    const response = await this.personMovieCreditsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of people ordered by popularity.
   * Popular
   */
  async personPopularListRaw(
    requestParameters: PersonPopularListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersonPopularList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/popular`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonPopularList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of people ordered by popularity.
   * Popular
   */
  async personPopularList(
    requestParameters: PersonPopularListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersonPopularList200Response> {
    const response = await this.personPopularListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the tagged images for a person.
   * Tagged Images
   */
  async personTaggedImagesRaw(
    requestParameters: PersonTaggedImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersonTaggedImages200Response>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling personTaggedImages."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/{person_id}/tagged_images`.replace(
          `{${"person_id"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonTaggedImages200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the tagged images for a person.
   * Tagged Images
   */
  async personTaggedImages(
    requestParameters: PersonTaggedImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersonTaggedImages200Response> {
    const response = await this.personTaggedImagesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the TV credits that belong to a person.
   * TV Credits
   */
  async personTvCreditsRaw(
    requestParameters: PersonTvCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PersonTvCredits200Response>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling personTvCredits."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/{person_id}/tv_credits`.replace(
          `{${"person_id"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonTvCredits200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the TV credits that belong to a person.
   * TV Credits
   */
  async personTvCredits(
    requestParameters: PersonTvCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PersonTvCredits200Response> {
    const response = await this.personTvCreditsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Retrieve the details of a movie or TV show review.
   * Details
   */
  async reviewDetailsRaw(
    requestParameters: ReviewDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ReviewDetails200Response>> {
    if (
      requestParameters.reviewId === null ||
      requestParameters.reviewId === undefined
    ) {
      throw new runtime.RequiredError(
        "reviewId",
        "Required parameter requestParameters.reviewId was null or undefined when calling reviewDetails."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/review/{review_id}`.replace(
          `{${"review_id"}}`,
          encodeURIComponent(String(requestParameters.reviewId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ReviewDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve the details of a movie or TV show review.
   * Details
   */
  async reviewDetails(
    requestParameters: ReviewDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ReviewDetails200Response> {
    const response = await this.reviewDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Search for collections by their original, translated and alternative names.
   * Collection
   */
  async searchCollectionRaw(
    requestParameters: SearchCollectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchCollection200Response>> {
    if (
      requestParameters.query === null ||
      requestParameters.query === undefined
    ) {
      throw new runtime.RequiredError(
        "query",
        "Required parameter requestParameters.query was null or undefined when calling searchCollection."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    if (requestParameters.includeAdult !== undefined) {
      queryParameters["include_adult"] = requestParameters.includeAdult;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.region !== undefined) {
      queryParameters["region"] = requestParameters.region;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/search/collection`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchCollection200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Search for collections by their original, translated and alternative names.
   * Collection
   */
  async searchCollection(
    requestParameters: SearchCollectionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchCollection200Response> {
    const response = await this.searchCollectionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Search for companies by their original and alternative names.
   * Company
   */
  async searchCompanyRaw(
    requestParameters: SearchCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchCompany200Response>> {
    if (
      requestParameters.query === null ||
      requestParameters.query === undefined
    ) {
      throw new runtime.RequiredError(
        "query",
        "Required parameter requestParameters.query was null or undefined when calling searchCompany."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/search/company`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchCompany200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Search for companies by their original and alternative names.
   * Company
   */
  async searchCompany(
    requestParameters: SearchCompanyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchCompany200Response> {
    const response = await this.searchCompanyRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Search for keywords by their name.
   * Keyword
   */
  async searchKeywordRaw(
    requestParameters: SearchKeywordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchKeyword200Response>> {
    if (
      requestParameters.query === null ||
      requestParameters.query === undefined
    ) {
      throw new runtime.RequiredError(
        "query",
        "Required parameter requestParameters.query was null or undefined when calling searchKeyword."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/search/keyword`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchKeyword200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Search for keywords by their name.
   * Keyword
   */
  async searchKeyword(
    requestParameters: SearchKeywordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchKeyword200Response> {
    const response = await this.searchKeywordRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Search for movies by their original, translated and alternative titles.
   * Movie
   */
  async searchMovieRaw(
    requestParameters: SearchMovieRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchMovie200Response>> {
    if (
      requestParameters.query === null ||
      requestParameters.query === undefined
    ) {
      throw new runtime.RequiredError(
        "query",
        "Required parameter requestParameters.query was null or undefined when calling searchMovie."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    if (requestParameters.includeAdult !== undefined) {
      queryParameters["include_adult"] = requestParameters.includeAdult;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.primaryReleaseYear !== undefined) {
      queryParameters["primary_release_year"] =
        requestParameters.primaryReleaseYear;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.region !== undefined) {
      queryParameters["region"] = requestParameters.region;
    }

    if (requestParameters.year !== undefined) {
      queryParameters["year"] = requestParameters.year;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/search/movie`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchMovie200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Search for movies by their original, translated and alternative titles.
   * Movie
   */
  async searchMovie(
    requestParameters: SearchMovieRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchMovie200Response> {
    const response = await this.searchMovieRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Use multi search when you want to search for movies, TV shows and people in a single request.
   * Multi
   */
  async searchMultiRaw(
    requestParameters: SearchMultiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchMulti200Response>> {
    if (
      requestParameters.query === null ||
      requestParameters.query === undefined
    ) {
      throw new runtime.RequiredError(
        "query",
        "Required parameter requestParameters.query was null or undefined when calling searchMulti."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    if (requestParameters.includeAdult !== undefined) {
      queryParameters["include_adult"] = requestParameters.includeAdult;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/search/multi`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchMulti200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Use multi search when you want to search for movies, TV shows and people in a single request.
   * Multi
   */
  async searchMulti(
    requestParameters: SearchMultiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchMulti200Response> {
    const response = await this.searchMultiRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Search for people by their name and also known as names.
   * Person
   */
  async searchPersonRaw(
    requestParameters: SearchPersonRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchPerson200Response>> {
    if (
      requestParameters.query === null ||
      requestParameters.query === undefined
    ) {
      throw new runtime.RequiredError(
        "query",
        "Required parameter requestParameters.query was null or undefined when calling searchPerson."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    if (requestParameters.includeAdult !== undefined) {
      queryParameters["include_adult"] = requestParameters.includeAdult;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/search/person`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchPerson200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Search for people by their name and also known as names.
   * Person
   */
  async searchPerson(
    requestParameters: SearchPersonRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchPerson200Response> {
    const response = await this.searchPersonRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Search for TV shows by their original, translated and also known as names.
   * TV
   */
  async searchTvRaw(
    requestParameters: SearchTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchTv200Response>> {
    if (
      requestParameters.query === null ||
      requestParameters.query === undefined
    ) {
      throw new runtime.RequiredError(
        "query",
        "Required parameter requestParameters.query was null or undefined when calling searchTv."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.query !== undefined) {
      queryParameters["query"] = requestParameters.query;
    }

    if (requestParameters.firstAirDateYear !== undefined) {
      queryParameters["first_air_date_year"] =
        requestParameters.firstAirDateYear;
    }

    if (requestParameters.includeAdult !== undefined) {
      queryParameters["include_adult"] = requestParameters.includeAdult;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.year !== undefined) {
      queryParameters["year"] = requestParameters.year;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/search/tv`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchTv200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Search for TV shows by their original, translated and also known as names.
   * TV
   */
  async searchTv(
    requestParameters: SearchTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchTv200Response> {
    const response = await this.searchTvRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get the translations that belong to a person.
   * Translations
   */
  async translationsRaw(
    requestParameters: TranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Translations200Response>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling translations."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/person/{person_id}/translations`.replace(
          `{${"person_id"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      Translations200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the translations that belong to a person.
   * Translations
   */
  async translations(
    requestParameters: TranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Translations200Response> {
    const response = await this.translationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the trending movies, TV shows and people.
   * All
   */
  async trendingAllRaw(
    requestParameters: TrendingAllRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TrendingAll200Response>> {
    if (
      requestParameters.timeWindow === null ||
      requestParameters.timeWindow === undefined
    ) {
      throw new runtime.RequiredError(
        "timeWindow",
        "Required parameter requestParameters.timeWindow was null or undefined when calling trendingAll."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/trending/all/{time_window}`.replace(
          `{${"time_window"}}`,
          encodeURIComponent(String(requestParameters.timeWindow))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TrendingAll200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the trending movies, TV shows and people.
   * All
   */
  async trendingAll(
    requestParameters: TrendingAllRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TrendingAll200Response> {
    const response = await this.trendingAllRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the trending movies on TMDB.
   * Movies
   */
  async trendingMoviesRaw(
    requestParameters: TrendingMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TrendingAll200Response>> {
    if (
      requestParameters.timeWindow === null ||
      requestParameters.timeWindow === undefined
    ) {
      throw new runtime.RequiredError(
        "timeWindow",
        "Required parameter requestParameters.timeWindow was null or undefined when calling trendingMovies."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/trending/movie/{time_window}`.replace(
          `{${"time_window"}}`,
          encodeURIComponent(String(requestParameters.timeWindow))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TrendingAll200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the trending movies on TMDB.
   * Movies
   */
  async trendingMovies(
    requestParameters: TrendingMoviesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TrendingAll200Response> {
    const response = await this.trendingMoviesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the trending people on TMDB.
   * People
   */
  async trendingPeopleRaw(
    requestParameters: TrendingPeopleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TrendingPeople200Response>> {
    if (
      requestParameters.timeWindow === null ||
      requestParameters.timeWindow === undefined
    ) {
      throw new runtime.RequiredError(
        "timeWindow",
        "Required parameter requestParameters.timeWindow was null or undefined when calling trendingPeople."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/trending/person/{time_window}`.replace(
          `{${"time_window"}}`,
          encodeURIComponent(String(requestParameters.timeWindow))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TrendingPeople200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the trending people on TMDB.
   * People
   */
  async trendingPeople(
    requestParameters: TrendingPeopleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TrendingPeople200Response> {
    const response = await this.trendingPeopleRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the trending TV shows on TMDB.
   * TV
   */
  async trendingTvRaw(
    requestParameters: TrendingTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TrendingTv200Response>> {
    if (
      requestParameters.timeWindow === null ||
      requestParameters.timeWindow === undefined
    ) {
      throw new runtime.RequiredError(
        "timeWindow",
        "Required parameter requestParameters.timeWindow was null or undefined when calling trendingTv."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/trending/tv/{time_window}`.replace(
          `{${"time_window"}}`,
          encodeURIComponent(String(requestParameters.timeWindow))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TrendingTv200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the trending TV shows on TMDB.
   * TV
   */
  async trendingTv(
    requestParameters: TrendingTvRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TrendingTv200Response> {
    const response = await this.trendingTvRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get the rating, watchlist and favourite status.
   * Account States
   */
  async tvEpisodeAccountStatesRaw(
    requestParameters: TvEpisodeAccountStatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieAccountStates200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvEpisodeAccountStates."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvEpisodeAccountStates."
      );
    }

    if (
      requestParameters.episodeNumber === null ||
      requestParameters.episodeNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeNumber",
        "Required parameter requestParameters.episodeNumber was null or undefined when calling tvEpisodeAccountStates."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          )
          .replace(
            `{${"episode_number"}}`,
            encodeURIComponent(String(requestParameters.episodeNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieAccountStates200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the rating, watchlist and favourite status.
   * Account States
   */
  async tvEpisodeAccountStates(
    requestParameters: TvEpisodeAccountStatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieAccountStates200Response> {
    const response = await this.tvEpisodeAccountStatesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Rate a TV episode and save it to your rated list.
   * Add Rating
   */
  async tvEpisodeAddRatingRaw(
    requestParameters: TvEpisodeAddRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieAddRating200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvEpisodeAddRating."
      );
    }

    if (
      requestParameters.contentType === null ||
      requestParameters.contentType === undefined
    ) {
      throw new runtime.RequiredError(
        "contentType",
        "Required parameter requestParameters.contentType was null or undefined when calling tvEpisodeAddRating."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvEpisodeAddRating."
      );
    }

    if (
      requestParameters.episodeNumber === null ||
      requestParameters.episodeNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeNumber",
        "Required parameter requestParameters.episodeNumber was null or undefined when calling tvEpisodeAddRating."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.contentType !== undefined &&
      requestParameters.contentType !== null
    ) {
      headerParameters["Content-Type"] = String(requestParameters.contentType);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          )
          .replace(
            `{${"episode_number"}}`,
            encodeURIComponent(String(requestParameters.episodeNumber))
          ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieAddRating200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Rate a TV episode and save it to your rated list.
   * Add Rating
   */
  async tvEpisodeAddRating(
    requestParameters: TvEpisodeAddRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieAddRating200Response> {
    const response = await this.tvEpisodeAddRatingRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the recent changes for a TV episode.
   * Changes
   */
  async tvEpisodeChangesByIdRaw(
    requestParameters: TvEpisodeChangesByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvEpisodeChangesById200Response>> {
    if (
      requestParameters.episodeId === null ||
      requestParameters.episodeId === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeId",
        "Required parameter requestParameters.episodeId was null or undefined when calling tvEpisodeChangesById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/episode/{episode_id}/changes`.replace(
          `{${"episode_id"}}`,
          encodeURIComponent(String(requestParameters.episodeId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvEpisodeChangesById200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the recent changes for a TV episode.
   * Changes
   */
  async tvEpisodeChangesById(
    requestParameters: TvEpisodeChangesByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvEpisodeChangesById200Response> {
    const response = await this.tvEpisodeChangesByIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Credits
   */
  async tvEpisodeCreditsRaw(
    requestParameters: TvEpisodeCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvEpisodeCredits200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvEpisodeCredits."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvEpisodeCredits."
      );
    }

    if (
      requestParameters.episodeNumber === null ||
      requestParameters.episodeNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeNumber",
        "Required parameter requestParameters.episodeNumber was null or undefined when calling tvEpisodeCredits."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          )
          .replace(
            `{${"episode_number"}}`,
            encodeURIComponent(String(requestParameters.episodeNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvEpisodeCredits200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Credits
   */
  async tvEpisodeCredits(
    requestParameters: TvEpisodeCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvEpisodeCredits200Response> {
    const response = await this.tvEpisodeCreditsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Delete your rating on a TV episode.
   * Delete Rating
   */
  async tvEpisodeDeleteRatingRaw(
    requestParameters: TvEpisodeDeleteRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieDeleteRating200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvEpisodeDeleteRating."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvEpisodeDeleteRating."
      );
    }

    if (
      requestParameters.episodeNumber === null ||
      requestParameters.episodeNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeNumber",
        "Required parameter requestParameters.episodeNumber was null or undefined when calling tvEpisodeDeleteRating."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.contentType !== undefined &&
      requestParameters.contentType !== null
    ) {
      headerParameters["Content-Type"] = String(requestParameters.contentType);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          )
          .replace(
            `{${"episode_number"}}`,
            encodeURIComponent(String(requestParameters.episodeNumber))
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieDeleteRating200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Delete your rating on a TV episode.
   * Delete Rating
   */
  async tvEpisodeDeleteRating(
    requestParameters: TvEpisodeDeleteRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieDeleteRating200Response> {
    const response = await this.tvEpisodeDeleteRatingRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Query the details of a TV episode.
   * Details
   */
  async tvEpisodeDetailsRaw(
    requestParameters: TvEpisodeDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvEpisodeDetails200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvEpisodeDetails."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvEpisodeDetails."
      );
    }

    if (
      requestParameters.episodeNumber === null ||
      requestParameters.episodeNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeNumber",
        "Required parameter requestParameters.episodeNumber was null or undefined when calling tvEpisodeDetails."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.appendToResponse !== undefined) {
      queryParameters["append_to_response"] =
        requestParameters.appendToResponse;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/episode/{episode_number}`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          )
          .replace(
            `{${"episode_number"}}`,
            encodeURIComponent(String(requestParameters.episodeNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvEpisodeDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Query the details of a TV episode.
   * Details
   */
  async tvEpisodeDetails(
    requestParameters: TvEpisodeDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvEpisodeDetails200Response> {
    const response = await this.tvEpisodeDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of external IDs that have been added to a TV episode.
   * External IDs
   */
  async tvEpisodeExternalIdsRaw(
    requestParameters: TvEpisodeExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvEpisodeExternalIds200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvEpisodeExternalIds."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvEpisodeExternalIds."
      );
    }

    if (
      requestParameters.episodeNumber === null ||
      requestParameters.episodeNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeNumber",
        "Required parameter requestParameters.episodeNumber was null or undefined when calling tvEpisodeExternalIds."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          )
          .replace(
            `{${"episode_number"}}`,
            encodeURIComponent(String(requestParameters.episodeNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvEpisodeExternalIds200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of external IDs that have been added to a TV episode.
   * External IDs
   */
  async tvEpisodeExternalIds(
    requestParameters: TvEpisodeExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvEpisodeExternalIds200Response> {
    const response = await this.tvEpisodeExternalIdsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the details of a TV episode group.
   * Details
   */
  async tvEpisodeGroupDetailsRaw(
    requestParameters: TvEpisodeGroupDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvEpisodeGroupDetails200Response>> {
    if (
      requestParameters.tvEpisodeGroupId === null ||
      requestParameters.tvEpisodeGroupId === undefined
    ) {
      throw new runtime.RequiredError(
        "tvEpisodeGroupId",
        "Required parameter requestParameters.tvEpisodeGroupId was null or undefined when calling tvEpisodeGroupDetails."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/episode_group/{tv_episode_group_id}`.replace(
          `{${"tv_episode_group_id"}}`,
          encodeURIComponent(String(requestParameters.tvEpisodeGroupId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvEpisodeGroupDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the details of a TV episode group.
   * Details
   */
  async tvEpisodeGroupDetails(
    requestParameters: TvEpisodeGroupDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvEpisodeGroupDetails200Response> {
    const response = await this.tvEpisodeGroupDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the images that belong to a TV episode.
   * Images
   */
  async tvEpisodeImagesRaw(
    requestParameters: TvEpisodeImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvEpisodeImages200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvEpisodeImages."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvEpisodeImages."
      );
    }

    if (
      requestParameters.episodeNumber === null ||
      requestParameters.episodeNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeNumber",
        "Required parameter requestParameters.episodeNumber was null or undefined when calling tvEpisodeImages."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includeImageLanguage !== undefined) {
      queryParameters["include_image_language"] =
        requestParameters.includeImageLanguage;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          )
          .replace(
            `{${"episode_number"}}`,
            encodeURIComponent(String(requestParameters.episodeNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvEpisodeImages200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the images that belong to a TV episode.
   * Images
   */
  async tvEpisodeImages(
    requestParameters: TvEpisodeImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvEpisodeImages200Response> {
    const response = await this.tvEpisodeImagesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the translations that have been added to a TV episode.
   * Translations
   */
  async tvEpisodeTranslationsRaw(
    requestParameters: TvEpisodeTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvEpisodeTranslations200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvEpisodeTranslations."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvEpisodeTranslations."
      );
    }

    if (
      requestParameters.episodeNumber === null ||
      requestParameters.episodeNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeNumber",
        "Required parameter requestParameters.episodeNumber was null or undefined when calling tvEpisodeTranslations."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          )
          .replace(
            `{${"episode_number"}}`,
            encodeURIComponent(String(requestParameters.episodeNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvEpisodeTranslations200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the translations that have been added to a TV episode.
   * Translations
   */
  async tvEpisodeTranslations(
    requestParameters: TvEpisodeTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvEpisodeTranslations200Response> {
    const response = await this.tvEpisodeTranslationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the videos that belong to a TV episode.
   * Videos
   */
  async tvEpisodeVideosRaw(
    requestParameters: TvEpisodeVideosRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonVideos200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvEpisodeVideos."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvEpisodeVideos."
      );
    }

    if (
      requestParameters.episodeNumber === null ||
      requestParameters.episodeNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "episodeNumber",
        "Required parameter requestParameters.episodeNumber was null or undefined when calling tvEpisodeVideos."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includeVideoLanguage !== undefined) {
      queryParameters["include_video_language"] =
        requestParameters.includeVideoLanguage;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          )
          .replace(
            `{${"episode_number"}}`,
            encodeURIComponent(String(requestParameters.episodeNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonVideos200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the videos that belong to a TV episode.
   * Videos
   */
  async tvEpisodeVideos(
    requestParameters: TvEpisodeVideosRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonVideos200Response> {
    const response = await this.tvEpisodeVideosRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the rating, watchlist and favourite status.
   * Account States
   */
  async tvSeasonAccountStatesRaw(
    requestParameters: TvSeasonAccountStatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonAccountStates200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeasonAccountStates."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvSeasonAccountStates."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/account_states`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonAccountStates200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the rating, watchlist and favourite status.
   * Account States
   */
  async tvSeasonAccountStates(
    requestParameters: TvSeasonAccountStatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonAccountStates200Response> {
    const response = await this.tvSeasonAccountStatesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the aggregate credits (cast and crew) that have been added to a TV season.
   * Aggregate Credits
   */
  async tvSeasonAggregateCreditsRaw(
    requestParameters: TvSeasonAggregateCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonAggregateCredits200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeasonAggregateCredits."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvSeasonAggregateCredits."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/aggregate_credits`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonAggregateCredits200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the aggregate credits (cast and crew) that have been added to a TV season.
   * Aggregate Credits
   */
  async tvSeasonAggregateCredits(
    requestParameters: TvSeasonAggregateCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonAggregateCredits200Response> {
    const response = await this.tvSeasonAggregateCreditsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the recent changes for a TV season.
   * Changes
   */
  async tvSeasonChangesByIdRaw(
    requestParameters: TvSeasonChangesByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonChangesById200Response>> {
    if (
      requestParameters.seasonId === null ||
      requestParameters.seasonId === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonId",
        "Required parameter requestParameters.seasonId was null or undefined when calling tvSeasonChangesById."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.endDate !== undefined) {
      queryParameters["end_date"] = requestParameters.endDate;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["start_date"] = requestParameters.startDate;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/season/{season_id}/changes`.replace(
          `{${"season_id"}}`,
          encodeURIComponent(String(requestParameters.seasonId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonChangesById200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the recent changes for a TV season.
   * Changes
   */
  async tvSeasonChangesById(
    requestParameters: TvSeasonChangesByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonChangesById200Response> {
    const response = await this.tvSeasonChangesByIdRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Credits
   */
  async tvSeasonCreditsRaw(
    requestParameters: TvSeasonCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonCredits200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeasonCredits."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvSeasonCredits."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/credits`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonCredits200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Credits
   */
  async tvSeasonCredits(
    requestParameters: TvSeasonCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonCredits200Response> {
    const response = await this.tvSeasonCreditsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Query the details of a TV season.
   * Details
   */
  async tvSeasonDetailsRaw(
    requestParameters: TvSeasonDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonDetails200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeasonDetails."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvSeasonDetails."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.appendToResponse !== undefined) {
      queryParameters["append_to_response"] =
        requestParameters.appendToResponse;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Query the details of a TV season.
   * Details
   */
  async tvSeasonDetails(
    requestParameters: TvSeasonDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonDetails200Response> {
    const response = await this.tvSeasonDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of external IDs that have been added to a TV season.
   * External IDs
   */
  async tvSeasonExternalIdsRaw(
    requestParameters: TvSeasonExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonExternalIds200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeasonExternalIds."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvSeasonExternalIds."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/external_ids`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonExternalIds200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of external IDs that have been added to a TV season.
   * External IDs
   */
  async tvSeasonExternalIds(
    requestParameters: TvSeasonExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonExternalIds200Response> {
    const response = await this.tvSeasonExternalIdsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the images that belong to a TV season.
   * Images
   */
  async tvSeasonImagesRaw(
    requestParameters: TvSeasonImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonImages200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeasonImages."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvSeasonImages."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includeImageLanguage !== undefined) {
      queryParameters["include_image_language"] =
        requestParameters.includeImageLanguage;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/images`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonImages200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the images that belong to a TV season.
   * Images
   */
  async tvSeasonImages(
    requestParameters: TvSeasonImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonImages200Response> {
    const response = await this.tvSeasonImagesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the translations for a TV season.
   * Translations
   */
  async tvSeasonTranslationsRaw(
    requestParameters: TvSeasonTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonTranslations200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeasonTranslations."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvSeasonTranslations."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/translations`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonTranslations200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the translations for a TV season.
   * Translations
   */
  async tvSeasonTranslations(
    requestParameters: TvSeasonTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonTranslations200Response> {
    const response = await this.tvSeasonTranslationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the videos that belong to a TV season.
   * Videos
   */
  async tvSeasonVideosRaw(
    requestParameters: TvSeasonVideosRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonVideos200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeasonVideos."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvSeasonVideos."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includeVideoLanguage !== undefined) {
      queryParameters["include_video_language"] =
        requestParameters.includeVideoLanguage;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/videos`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonVideos200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the videos that belong to a TV season.
   * Videos
   */
  async tvSeasonVideos(
    requestParameters: TvSeasonVideosRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonVideos200Response> {
    const response = await this.tvSeasonVideosRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the list of streaming providers we have for a TV season.
   * Watch Providers
   */
  async tvSeasonWatchProvidersRaw(
    requestParameters: TvSeasonWatchProvidersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeasonWatchProviders200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeasonWatchProviders."
      );
    }

    if (
      requestParameters.seasonNumber === null ||
      requestParameters.seasonNumber === undefined
    ) {
      throw new runtime.RequiredError(
        "seasonNumber",
        "Required parameter requestParameters.seasonNumber was null or undefined when calling tvSeasonWatchProviders."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/season/{season_number}/watch/providers`
          .replace(
            `{${"series_id"}}`,
            encodeURIComponent(String(requestParameters.seriesId))
          )
          .replace(
            `{${"season_number"}}`,
            encodeURIComponent(String(requestParameters.seasonNumber))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeasonWatchProviders200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the list of streaming providers we have for a TV season.
   * Watch Providers
   */
  async tvSeasonWatchProviders(
    requestParameters: TvSeasonWatchProvidersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeasonWatchProviders200Response> {
    const response = await this.tvSeasonWatchProvidersRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the rating, watchlist and favourite status.
   * Account States
   */
  async tvSeriesAccountStatesRaw(
    requestParameters: TvSeriesAccountStatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieAccountStates200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesAccountStates."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/account_states`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieAccountStates200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the rating, watchlist and favourite status.
   * Account States
   */
  async tvSeriesAccountStates(
    requestParameters: TvSeriesAccountStatesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieAccountStates200Response> {
    const response = await this.tvSeriesAccountStatesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Rate a TV show and save it to your rated list.
   * Add Rating
   */
  async tvSeriesAddRatingRaw(
    requestParameters: TvSeriesAddRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieAddRating200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesAddRating."
      );
    }

    if (
      requestParameters.contentType === null ||
      requestParameters.contentType === undefined
    ) {
      throw new runtime.RequiredError(
        "contentType",
        "Required parameter requestParameters.contentType was null or undefined when calling tvSeriesAddRating."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.contentType !== undefined &&
      requestParameters.contentType !== null
    ) {
      headerParameters["Content-Type"] = String(requestParameters.contentType);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/rating`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: MovieAddRatingRequestToJSON(
          requestParameters.movieAddRatingRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieAddRating200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Rate a TV show and save it to your rated list.
   * Add Rating
   */
  async tvSeriesAddRating(
    requestParameters: TvSeriesAddRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieAddRating200Response> {
    const response = await this.tvSeriesAddRatingRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the aggregate credits (cast and crew) that have been added to a TV show.
   * Aggregate Credits
   */
  async tvSeriesAggregateCreditsRaw(
    requestParameters: TvSeriesAggregateCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesAggregateCredits200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesAggregateCredits."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/aggregate_credits`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesAggregateCredits200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the aggregate credits (cast and crew) that have been added to a TV show.
   * Aggregate Credits
   */
  async tvSeriesAggregateCredits(
    requestParameters: TvSeriesAggregateCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesAggregateCredits200Response> {
    const response = await this.tvSeriesAggregateCreditsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of TV shows airing today.
   * Airing Today
   */
  async tvSeriesAiringTodayListRaw(
    requestParameters: TvSeriesAiringTodayListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesAiringTodayList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.timezone !== undefined) {
      queryParameters["timezone"] = requestParameters.timezone;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/airing_today`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesAiringTodayList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of TV shows airing today.
   * Airing Today
   */
  async tvSeriesAiringTodayList(
    requestParameters: TvSeriesAiringTodayListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesAiringTodayList200Response> {
    const response = await this.tvSeriesAiringTodayListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the alternative titles that have been added to a TV show.
   * Alternative Titles
   */
  async tvSeriesAlternativeTitlesRaw(
    requestParameters: TvSeriesAlternativeTitlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesAlternativeTitles200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesAlternativeTitles."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/alternative_titles`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesAlternativeTitles200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the alternative titles that have been added to a TV show.
   * Alternative Titles
   */
  async tvSeriesAlternativeTitles(
    requestParameters: TvSeriesAlternativeTitlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesAlternativeTitles200Response> {
    const response = await this.tvSeriesAlternativeTitlesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the recent changes for a TV show.
   * Changes
   */
  async tvSeriesChangesRaw(
    requestParameters: TvSeriesChangesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesChanges200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesChanges."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.endDate !== undefined) {
      queryParameters["end_date"] = requestParameters.endDate;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["start_date"] = requestParameters.startDate;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/changes`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesChanges200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the recent changes for a TV show.
   * Changes
   */
  async tvSeriesChanges(
    requestParameters: TvSeriesChangesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesChanges200Response> {
    const response = await this.tvSeriesChangesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the content ratings that have been added to a TV show.
   * Content Ratings
   */
  async tvSeriesContentRatingsRaw(
    requestParameters: TvSeriesContentRatingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesContentRatings200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesContentRatings."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/content_ratings`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesContentRatings200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the content ratings that have been added to a TV show.
   * Content Ratings
   */
  async tvSeriesContentRatings(
    requestParameters: TvSeriesContentRatingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesContentRatings200Response> {
    const response = await this.tvSeriesContentRatingsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the latest season credits of a TV show.
   * Credits
   */
  async tvSeriesCreditsRaw(
    requestParameters: TvSeriesCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesCredits200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesCredits."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/credits`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesCredits200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the latest season credits of a TV show.
   * Credits
   */
  async tvSeriesCredits(
    requestParameters: TvSeriesCreditsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesCredits200Response> {
    const response = await this.tvSeriesCreditsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Delete Rating
   */
  async tvSeriesDeleteRatingRaw(
    requestParameters: TvSeriesDeleteRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieDeleteRating200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesDeleteRating."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.guestSessionId !== undefined) {
      queryParameters["guest_session_id"] = requestParameters.guestSessionId;
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters["session_id"] = requestParameters.sessionId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.contentType !== undefined &&
      requestParameters.contentType !== null
    ) {
      headerParameters["Content-Type"] = String(requestParameters.contentType);
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/rating`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieDeleteRating200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Delete Rating
   */
  async tvSeriesDeleteRating(
    requestParameters: TvSeriesDeleteRatingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieDeleteRating200Response> {
    const response = await this.tvSeriesDeleteRatingRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the details of a TV show.
   * Details
   */
  async tvSeriesDetailsRaw(
    requestParameters: TvSeriesDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesDetails200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesDetails."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.appendToResponse !== undefined) {
      queryParameters["append_to_response"] =
        requestParameters.appendToResponse;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesDetails200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the details of a TV show.
   * Details
   */
  async tvSeriesDetails(
    requestParameters: TvSeriesDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesDetails200Response> {
    const response = await this.tvSeriesDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the episode groups that have been added to a TV show.
   * Episode Groups
   */
  async tvSeriesEpisodeGroupsRaw(
    requestParameters: TvSeriesEpisodeGroupsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesEpisodeGroups200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesEpisodeGroups."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/episode_groups`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesEpisodeGroups200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the episode groups that have been added to a TV show.
   * Episode Groups
   */
  async tvSeriesEpisodeGroups(
    requestParameters: TvSeriesEpisodeGroupsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesEpisodeGroups200Response> {
    const response = await this.tvSeriesEpisodeGroupsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of external IDs that have been added to a TV show.
   * External IDs
   */
  async tvSeriesExternalIdsRaw(
    requestParameters: TvSeriesExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesExternalIds200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesExternalIds."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/external_ids`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesExternalIds200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of external IDs that have been added to a TV show.
   * External IDs
   */
  async tvSeriesExternalIds(
    requestParameters: TvSeriesExternalIdsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesExternalIds200Response> {
    const response = await this.tvSeriesExternalIdsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the images that belong to a TV series.
   * Images
   */
  async tvSeriesImagesRaw(
    requestParameters: TvSeriesImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MovieImages200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesImages."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includeImageLanguage !== undefined) {
      queryParameters["include_image_language"] =
        requestParameters.includeImageLanguage;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/images`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MovieImages200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the images that belong to a TV series.
   * Images
   */
  async tvSeriesImages(
    requestParameters: TvSeriesImagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MovieImages200Response> {
    const response = await this.tvSeriesImagesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of keywords that have been added to a TV show.
   * Keywords
   */
  async tvSeriesKeywordsRaw(
    requestParameters: TvSeriesKeywordsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesKeywords200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesKeywords."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/keywords`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesKeywords200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of keywords that have been added to a TV show.
   * Keywords
   */
  async tvSeriesKeywords(
    requestParameters: TvSeriesKeywordsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesKeywords200Response> {
    const response = await this.tvSeriesKeywordsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the newest TV show ID.
   * Latest
   */
  async tvSeriesLatestIdRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesLatestId200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/latest`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesLatestId200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the newest TV show ID.
   * Latest
   */
  async tvSeriesLatestId(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesLatestId200Response> {
    const response = await this.tvSeriesLatestIdRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a list of TV shows that air in the next 7 days.
   * On The Air
   */
  async tvSeriesOnTheAirListRaw(
    requestParameters: TvSeriesOnTheAirListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesOnTheAirList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.timezone !== undefined) {
      queryParameters["timezone"] = requestParameters.timezone;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/on_the_air`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesOnTheAirList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of TV shows that air in the next 7 days.
   * On The Air
   */
  async tvSeriesOnTheAirList(
    requestParameters: TvSeriesOnTheAirListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesOnTheAirList200Response> {
    const response = await this.tvSeriesOnTheAirListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of TV shows ordered by popularity.
   * Popular
   */
  async tvSeriesPopularListRaw(
    requestParameters: TvSeriesPopularListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesPopularList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/popular`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesPopularList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of TV shows ordered by popularity.
   * Popular
   */
  async tvSeriesPopularList(
    requestParameters: TvSeriesPopularListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesPopularList200Response> {
    const response = await this.tvSeriesPopularListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   * Recommendations
   */
  async tvSeriesRecommendationsRaw(
    requestParameters: TvSeriesRecommendationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesRecommendations200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesRecommendations."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/recommendations`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesRecommendations200ResponseFromJSON(jsonValue)
    );
  }

  /**
   *
   * Recommendations
   */
  async tvSeriesRecommendations(
    requestParameters: TvSeriesRecommendationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesRecommendations200Response> {
    const response = await this.tvSeriesRecommendationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the reviews that have been added to a TV show.
   * Reviews
   */
  async tvSeriesReviewsRaw(
    requestParameters: TvSeriesReviewsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesReviews200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesReviews."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/reviews`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesReviews200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the reviews that have been added to a TV show.
   * Reviews
   */
  async tvSeriesReviews(
    requestParameters: TvSeriesReviewsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesReviews200Response> {
    const response = await this.tvSeriesReviewsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the seasons and episodes that have screened theatrically.
   * Screened Theatrically
   */
  async tvSeriesScreenedTheatricallyRaw(
    requestParameters: TvSeriesScreenedTheatricallyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesScreenedTheatrically200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesScreenedTheatrically."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/screened_theatrically`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesScreenedTheatrically200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the seasons and episodes that have screened theatrically.
   * Screened Theatrically
   */
  async tvSeriesScreenedTheatrically(
    requestParameters: TvSeriesScreenedTheatricallyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesScreenedTheatrically200Response> {
    const response = await this.tvSeriesScreenedTheatricallyRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the similar TV shows.
   * Similar
   */
  async tvSeriesSimilarRaw(
    requestParameters: TvSeriesSimilarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesSimilar200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesSimilar."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/similar`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesSimilar200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the similar TV shows.
   * Similar
   */
  async tvSeriesSimilar(
    requestParameters: TvSeriesSimilarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesSimilar200Response> {
    const response = await this.tvSeriesSimilarRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get a list of TV shows ordered by rating.
   * Top Rated
   */
  async tvSeriesTopRatedListRaw(
    requestParameters: TvSeriesTopRatedListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesTopRatedList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/top_rated`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesTopRatedList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get a list of TV shows ordered by rating.
   * Top Rated
   */
  async tvSeriesTopRatedList(
    requestParameters: TvSeriesTopRatedListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesTopRatedList200Response> {
    const response = await this.tvSeriesTopRatedListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the translations that have been added to a TV show.
   * Translations
   */
  async tvSeriesTranslationsRaw(
    requestParameters: TvSeriesTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesTranslations200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesTranslations."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/translations`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesTranslations200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the translations that have been added to a TV show.
   * Translations
   */
  async tvSeriesTranslations(
    requestParameters: TvSeriesTranslationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesTranslations200Response> {
    const response = await this.tvSeriesTranslationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the videos that belong to a TV show.
   * Videos
   */
  async tvSeriesVideosRaw(
    requestParameters: TvSeriesVideosRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesVideos200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesVideos."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.includeVideoLanguage !== undefined) {
      queryParameters["include_video_language"] =
        requestParameters.includeVideoLanguage;
    }

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/videos`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesVideos200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the videos that belong to a TV show.
   * Videos
   */
  async tvSeriesVideos(
    requestParameters: TvSeriesVideosRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesVideos200Response> {
    const response = await this.tvSeriesVideosRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the list of streaming providers we have for a TV show.
   * Watch Providers
   */
  async tvSeriesWatchProvidersRaw(
    requestParameters: TvSeriesWatchProvidersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TvSeriesWatchProviders200Response>> {
    if (
      requestParameters.seriesId === null ||
      requestParameters.seriesId === undefined
    ) {
      throw new runtime.RequiredError(
        "seriesId",
        "Required parameter requestParameters.seriesId was null or undefined when calling tvSeriesWatchProviders."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/tv/{series_id}/watch/providers`.replace(
          `{${"series_id"}}`,
          encodeURIComponent(String(requestParameters.seriesId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TvSeriesWatchProviders200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the list of streaming providers we have for a TV show.
   * Watch Providers
   */
  async tvSeriesWatchProviders(
    requestParameters: TvSeriesWatchProvidersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TvSeriesWatchProviders200Response> {
    const response = await this.tvSeriesWatchProvidersRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the list of streaming providers we have for TV shows.
   * TV Providers
   */
  async watchProviderTvListRaw(
    requestParameters: WatchProviderTvListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WatchProvidersMovieList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.watchRegion !== undefined) {
      queryParameters["watch_region"] = requestParameters.watchRegion;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/watch/providers/tv`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WatchProvidersMovieList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the list of streaming providers we have for TV shows.
   * TV Providers
   */
  async watchProviderTvList(
    requestParameters: WatchProviderTvListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WatchProvidersMovieList200Response> {
    const response = await this.watchProviderTvListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the list of the countries we have watch provider (OTT/streaming) data for.
   * Available Regions
   */
  async watchProvidersAvailableRegionsRaw(
    requestParameters: WatchProvidersAvailableRegionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WatchProvidersAvailableRegions200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/watch/providers/regions`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WatchProvidersAvailableRegions200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the list of the countries we have watch provider (OTT/streaming) data for.
   * Available Regions
   */
  async watchProvidersAvailableRegions(
    requestParameters: WatchProvidersAvailableRegionsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WatchProvidersAvailableRegions200Response> {
    const response = await this.watchProvidersAvailableRegionsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the list of streaming providers we have for movies.
   * Movie Providers
   */
  async watchProvidersMovieListRaw(
    requestParameters: WatchProvidersMovieListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WatchProvidersMovieList200Response>> {
    const queryParameters: any = {};

    if (requestParameters.language !== undefined) {
      queryParameters["language"] = requestParameters.language;
    }

    if (requestParameters.watchRegion !== undefined) {
      queryParameters["watch_region"] = requestParameters.watchRegion;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // sec0 authentication
    }

    const response = await this.request(
      {
        path: `/3/watch/providers/movie`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WatchProvidersMovieList200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get the list of streaming providers we have for movies.
   * Movie Providers
   */
  async watchProvidersMovieList(
    requestParameters: WatchProvidersMovieListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WatchProvidersMovieList200Response> {
    const response = await this.watchProvidersMovieListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const AccountFavoriteTvSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type AccountFavoriteTvSortByEnum =
  (typeof AccountFavoriteTvSortByEnum)[keyof typeof AccountFavoriteTvSortByEnum];
/**
 * @export
 */
export const AccountGetFavoritesSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type AccountGetFavoritesSortByEnum =
  (typeof AccountGetFavoritesSortByEnum)[keyof typeof AccountGetFavoritesSortByEnum];
/**
 * @export
 */
export const AccountRatedMoviesSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type AccountRatedMoviesSortByEnum =
  (typeof AccountRatedMoviesSortByEnum)[keyof typeof AccountRatedMoviesSortByEnum];
/**
 * @export
 */
export const AccountRatedTvSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type AccountRatedTvSortByEnum =
  (typeof AccountRatedTvSortByEnum)[keyof typeof AccountRatedTvSortByEnum];
/**
 * @export
 */
export const AccountRatedTvEpisodesSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type AccountRatedTvEpisodesSortByEnum =
  (typeof AccountRatedTvEpisodesSortByEnum)[keyof typeof AccountRatedTvEpisodesSortByEnum];
/**
 * @export
 */
export const AccountWatchlistMoviesSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type AccountWatchlistMoviesSortByEnum =
  (typeof AccountWatchlistMoviesSortByEnum)[keyof typeof AccountWatchlistMoviesSortByEnum];
/**
 * @export
 */
export const AccountWatchlistTvSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type AccountWatchlistTvSortByEnum =
  (typeof AccountWatchlistTvSortByEnum)[keyof typeof AccountWatchlistTvSortByEnum];
/**
 * @export
 */
export const DiscoverMovieSortByEnum = {
  PopularityAsc: "popularity.asc",
  PopularityDesc: "popularity.desc",
  RevenueAsc: "revenue.asc",
  RevenueDesc: "revenue.desc",
  PrimaryReleaseDateAsc: "primary_release_date.asc",
  PrimaryReleaseDateDesc: "primary_release_date.desc",
  VoteAverageAsc: "vote_average.asc",
  VoteAverageDesc: "vote_average.desc",
  VoteCountAsc: "vote_count.asc",
  VoteCountDesc: "vote_count.desc",
} as const;
export type DiscoverMovieSortByEnum =
  (typeof DiscoverMovieSortByEnum)[keyof typeof DiscoverMovieSortByEnum];
/**
 * @export
 */
export const DiscoverTvSortByEnum = {
  PopularityAsc: "popularity.asc",
  PopularityDesc: "popularity.desc",
  RevenueAsc: "revenue.asc",
  RevenueDesc: "revenue.desc",
  PrimaryReleaseDateAsc: "primary_release_date.asc",
  PrimaryReleaseDateDesc: "primary_release_date.desc",
  VoteAverageAsc: "vote_average.asc",
  VoteAverageDesc: "vote_average.desc",
  VoteCountAsc: "vote_count.asc",
  VoteCountDesc: "vote_count.desc",
} as const;
export type DiscoverTvSortByEnum =
  (typeof DiscoverTvSortByEnum)[keyof typeof DiscoverTvSortByEnum];
/**
 * @export
 */
export const FindByIdExternalSourceEnum = {
  Empty: "",
  ImdbId: "imdb_id",
  FacebookId: "facebook_id",
  InstagramId: "instagram_id",
  TvdbId: "tvdb_id",
  TiktokId: "tiktok_id",
  TwitterId: "twitter_id",
  WikidataId: "wikidata_id",
  YoutubeId: "youtube_id",
} as const;
export type FindByIdExternalSourceEnum =
  (typeof FindByIdExternalSourceEnum)[keyof typeof FindByIdExternalSourceEnum];
/**
 * @export
 */
export const GuestSessionRatedMoviesSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type GuestSessionRatedMoviesSortByEnum =
  (typeof GuestSessionRatedMoviesSortByEnum)[keyof typeof GuestSessionRatedMoviesSortByEnum];
/**
 * @export
 */
export const GuestSessionRatedTvSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type GuestSessionRatedTvSortByEnum =
  (typeof GuestSessionRatedTvSortByEnum)[keyof typeof GuestSessionRatedTvSortByEnum];
/**
 * @export
 */
export const GuestSessionRatedTvEpisodesSortByEnum = {
  Asc: "created_at.asc",
  Desc: "created_at.desc",
} as const;
export type GuestSessionRatedTvEpisodesSortByEnum =
  (typeof GuestSessionRatedTvEpisodesSortByEnum)[keyof typeof GuestSessionRatedTvEpisodesSortByEnum];
/**
 * @export
 */
export const TrendingAllTimeWindowEnum = {
  Day: "day",
  Week: "week",
} as const;
export type TrendingAllTimeWindowEnum =
  (typeof TrendingAllTimeWindowEnum)[keyof typeof TrendingAllTimeWindowEnum];
/**
 * @export
 */
export const TrendingMoviesTimeWindowEnum = {
  Day: "day",
  Week: "week",
} as const;
export type TrendingMoviesTimeWindowEnum =
  (typeof TrendingMoviesTimeWindowEnum)[keyof typeof TrendingMoviesTimeWindowEnum];
/**
 * @export
 */
export const TrendingPeopleTimeWindowEnum = {
  Day: "day",
  Week: "week",
} as const;
export type TrendingPeopleTimeWindowEnum =
  (typeof TrendingPeopleTimeWindowEnum)[keyof typeof TrendingPeopleTimeWindowEnum];
/**
 * @export
 */
export const TrendingTvTimeWindowEnum = {
  Day: "day",
  Week: "week",
} as const;
export type TrendingTvTimeWindowEnum =
  (typeof TrendingTvTimeWindowEnum)[keyof typeof TrendingTvTimeWindowEnum];
